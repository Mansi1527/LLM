{"ast":null,"code":"var _jsxFileName = \"D:\\\\llm\\\\llm-workflow-ui\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useCallback } from 'react';\n// import dotenv from 'dotenv';\n// dotenv.config();\n// import axios from 'axios';\n// import ReactFlow, {\n//   addEdge,\n//   applyEdgeChanges,\n//   applyNodeChanges,\n//   Controls,\n//   Background,\n//   NodeChange,\n//   EdgeChange,\n//   Connection,\n//   Edge,\n//   Node,\n// } from 'react-flow-renderer';\n// import { InputNode } from './components/InputNode';\n// import { LLMNode } from \"./components/LLMNode\"\n// import { OutputNode } from './components/OutputNode';\n\n// // Define initial nodes and edges\n// const initialNodes: Node[] = [\n//   {\n//     id: '1',\n//     type: 'inputNode',\n//     position: { x: 250, y: 5 },\n//     data: { label: 'Input Node', inputText: '' },\n//   },\n//   {\n//     id: '2',\n//     type: 'llmNode',\n//     position: { x: 250, y: 100 },\n//     data: { label: 'LLM Node', modelConfig: {} },\n//   },\n//   {\n//     id: '3',\n//     type: 'outputNode',\n//     position: { x: 250, y: 200 },\n//     data: { label: 'Output Node', output: '' },\n//   },\n// ];\n\n// const initialEdges: Edge[] = [];\n\n// const nodeTypes = {\n//   inputNode: InputNode,\n//   llmNode: LLMNode,\n//   outputNode: OutputNode,\n// };\n\n// const App = () => {\n//   const [nodes, setNodes] = useState<Node[]>(initialNodes);\n//   const [edges, setEdges] = useState<Edge[]>(initialEdges);\n\n//   // Handle node changes\n//   const onNodesChange = useCallback(\n//     (changes: NodeChange[]) => setNodes((nds) => applyNodeChanges(changes, nds)),\n//     []\n//   );\n\n//   // Handle edge changes\n//   const onEdgesChange = useCallback(\n//     (changes: EdgeChange[]) => setEdges((eds) => applyEdgeChanges(changes, eds)),\n//     []\n//   );\n\n//   // Handle node connections (Input -> LLM -> Output)\n//   const onConnect = useCallback(\n//     (params: Connection | Edge) => {\n//       const { source, target } = params;\n\n//       // Define valid connection rules\n//       if (\n//         (source === '1' && target === '2') || // Input -> LLM\n//         (source === '2' && target === '3') // LLM -> Output\n//       ) {\n//         setEdges((eds) => addEdge(params, eds));\n//       } else {\n//         alert('Invalid connection! Follow Input -> LLM -> Output flow.');\n//       }\n//     },\n//     []\n//   );\n\n//   // Handle workflow execution\n//   const handleRunWorkflow = async () => {\n//     const inputNode = nodes.find((node) => node.type === 'inputNode');\n//     const llmNode = nodes.find((node) => node.type === 'llmNode');\n//     const outputNodeIndex = nodes.findIndex((node) => node.type === 'outputNode');\n\n//     // Check if the required nodes are found\n//     if (!inputNode || !llmNode || outputNodeIndex === -1) {\n//       console.error(\"One or more nodes are not defined.\");\n//       alert(\"Please ensure that all nodes (Input, LLM, Output) are properly connected.\");\n//       return;\n//     }\n\n//     try {\n//       const response = await axios.post('https://api.openai.com/v1/chat/completions', {\n//         inputText: inputNode.data.inputText,\n//         modelConfig: {\n//           model: llmNode.data.modelName,\n//           temperature: llmNode.data.temperature,\n//           maxTokens: llmNode.data.maxTokens,\n//           topP: llmNode.data.topP,\n//           frequencyPenalty: llmNode.data.frequencyPenalty,\n//           presencePenalty: llmNode.data.presencePenalty,\n//         },\n//       }, {\n//         headers: {\n//           'Authorization': `Bearer ${process.env.REACT_APP_OPENAI_API_KEY}`,\n//         },\n//       });\n\n//       const updatedNodes = [...nodes];\n//       updatedNodes[outputNodeIndex].data.output = response.data.result; // Ensure you access the correct structure\n//       setNodes(updatedNodes);\n//     } catch (error: any) {  // Assert the error type to 'any'\n//       console.error(\"Error during API call:\", error.response ? error.response.data : error.message);\n//       alert(\"An error occurred while calling the API. Please try again.\");\n//     }\n//   };\n\n//   return (\n//     <div style={{ height: '100vh' }}>\n//       <ReactFlow\n//         nodes={nodes}\n//         edges={edges}\n//         onNodesChange={onNodesChange}\n//         onEdgesChange={onEdgesChange}\n//         onConnect={onConnect}\n//         nodeTypes={nodeTypes}\n//         fitView\n//       >\n//         <Background />\n//         <Controls />\n//       </ReactFlow>\n//       <button onClick={handleRunWorkflow} style={{ marginTop: '10px', padding: '10px' }}>\n//         Run Workflow\n//       </button>\n//     </div>\n//   );\n// };\n// export default App;\n// import React, { useState, useCallback } from 'react';\nimport axios from 'axios';\nimport ReactFlow, { addEdge, applyEdgeChanges, applyNodeChanges, Controls, Background } from 'react-flow-renderer';\nimport { InputNode } from './components/InputNode';\nimport { LLMNode } from \"./components/LLMNode\";\nimport { OutputNode } from './components/OutputNode';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialNodes = [{\n  id: '1',\n  type: 'inputNode',\n  position: {\n    x: 250,\n    y: 5\n  },\n  data: {\n    label: 'Input Node',\n    inputText: ''\n  }\n}, {\n  id: '2',\n  type: 'llmNode',\n  position: {\n    x: 250,\n    y: 100\n  },\n  data: {\n    label: 'LLM Node',\n    modelConfig: {}\n  }\n}, {\n  id: '3',\n  type: 'outputNode',\n  position: {\n    x: 250,\n    y: 200\n  },\n  data: {\n    label: 'Output Node',\n    output: ''\n  }\n}];\nconst initialEdges = [];\nconst nodeTypes = {\n  inputNode: InputNode,\n  llmNode: LLMNode,\n  outputNode: OutputNode\n};\nconst App = () => {\n  _s();\n  const [nodes, setNodes] = useState(initialNodes);\n  const [edges, setEdges] = useState(initialEdges);\n  const onNodesChange = useCallback(changes => setNodes(nds => applyNodeChanges(changes, nds)), []);\n  const onEdgesChange = useCallback(changes => setEdges(eds => applyEdgeChanges(changes, eds)), []);\n  const onConnect = useCallback(params => {\n    const {\n      source,\n      target\n    } = params;\n    if (source === '1' && target === '2' || source === '2' && target === '3') {\n      setEdges(eds => addEdge(params, eds));\n    } else {\n      alert('Invalid connection! Follow Input -> LLM -> Output flow.');\n    }\n  }, []);\n  const handleRunWorkflow = async () => {\n    const inputNode = nodes.find(node => node.type === 'inputNode');\n    const llmNode = nodes.find(node => node.type === 'llmNode');\n    const outputNodeIndex = nodes.findIndex(node => node.type === 'outputNode');\n    if (!inputNode || !llmNode || outputNodeIndex === -1) {\n      console.error(\"One or more nodes are not defined.\");\n      alert(\"Please ensure that all nodes (Input, LLM, Output) are properly connected.\");\n      return;\n    }\n    try {\n      const response = await axios.post('https://api.openai.com/v1/chat/completions', {\n        inputText: inputNode.data.inputText,\n        modelConfig: {\n          model: llmNode.data.modelName,\n          temperature: llmNode.data.temperature,\n          maxTokens: llmNode.data.maxTokens,\n          topP: llmNode.data.topP,\n          frequencyPenalty: llmNode.data.frequencyPenalty,\n          presencePenalty: llmNode.data.presencePenalty\n        }\n      }, {\n        headers: {\n          'Authorization': `Bearer ${process.env.REACT_APP_OPENAI_API_KEY}`\n        }\n      });\n      const updatedNodes = [...nodes];\n      updatedNodes[outputNodeIndex].data.output = response.data.result;\n      setNodes(updatedNodes);\n    } catch (error) {\n      console.error(\"Error during API call:\", error.response ? error.response.data : error.message);\n      alert(\"An error occurred while calling the API. Please try again.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: '100vh'\n    },\n    children: [/*#__PURE__*/_jsxDEV(ReactFlow, {\n      nodes: nodes,\n      edges: edges,\n      onNodesChange: onNodesChange,\n      onEdgesChange: onEdgesChange,\n      onConnect: onConnect,\n      nodeTypes: nodeTypes,\n      fitView: true,\n      children: [/*#__PURE__*/_jsxDEV(Background, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleRunWorkflow,\n      style: {\n        marginTop: '10px',\n        padding: '10px'\n      },\n      children: \"Run Workflow\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 261,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"QpOJLU91VwfpESukmr0SDfSF2nU=\");\n_c = App;\nexport default App;\n\n// App.tsx\n// App.tsx\n// import React, { useState, useCallback, useRef } from 'react';\n// import ReactFlow, {\n//   addEdge,\n//   applyEdgeChanges,\n//   applyNodeChanges,\n//   Controls,\n//   Background,\n//   NodeChange,\n//   EdgeChange,\n//   Connection,\n//   Edge,\n//   Node,\n//   ReactFlowProvider,\n// } from 'react-flow-renderer';\n// import { InputNode } from './components/InputNode';\n// import { LLMNode } from './components/LLMNode';\n// import { OutputNode } from './components/OutputNode';\n//  // Import your custom edge if needed\n\n// const nodeTypes = {\n//   inputNode: InputNode,\n//   llmNode: LLMNode,\n//   outputNode: OutputNode,\n// };\n\n// // const edgeTypes = {\n// //   custom: CustomEdge, \n//   // Use your custom edge if needed\n// // };\n\n// const initialNodes: Node[] = [];\n\n// const App = () => {\n//   const [nodes, setNodes] = useState<Node[]>(initialNodes);\n//   const [edges, setEdges] = useState<Edge[]>([]);\n\n//   // Create a ref for the ReactFlow instance\n//   const reactFlowInstance = useRef<any>(null);\n\n//   // Handle node changes\n//   const onNodesChange = useCallback(\n//     (changes: NodeChange[]) => setNodes((nds) => applyNodeChanges(changes, nds)),\n//     []\n//   );\n\n//   // Handle edge changes\n//   const onEdgesChange = useCallback(\n//     (changes: EdgeChange[]) => setEdges((eds) => applyEdgeChanges(changes, eds)),\n//     []\n//   );\n\n//   // Handle connections\n//   const onConnect = useCallback(\n//     (params: Connection | Edge) => {\n//       setEdges((eds) => addEdge({ ...params, type: 'custom' }, eds));\n//     },\n//     []\n//   );\n\n//   // Drag-and-drop functionality\n//   const onDrop = useCallback(\n//     (event: React.DragEvent) => {\n//       event.preventDefault();\n//       const type = event.dataTransfer.getData('application/reactflow');\n//       const position = reactFlowInstance.current.project({\n//         x: event.clientX,\n//         y: event.clientY,\n//       });\n\n//       if (type) {\n//         const newNode = {\n//           id: `${nodes.length + 1}`,\n//           type,\n//           position,\n//           data: { label: `${type} Node` }, // Customize this according to your node types\n//         };\n//         setNodes((nds) => nds.concat(newNode));\n//       }\n//     },\n//     [nodes]\n//   );\n\n//   const onDragOver = useCallback((event: React.DragEvent) => {\n//     event.preventDefault();\n//     event.dataTransfer.dropEffect = 'move';\n//   }, []);\n\n//   return (\n//     <div style={{ height: '100vh' }}>\n//       <ReactFlow\n//         nodes={nodes}\n//         edges={edges}\n//         onNodesChange={onNodesChange}\n//         onEdgesChange={onEdgesChange}\n//         onConnect={onConnect}\n//         nodeTypes={nodeTypes}\n//         // edgeTypes={edgeTypes}\n//         fitView\n//         onDrop={onDrop}\n//         onDragOver={onDragOver}\n//         ref={reactFlowInstance} // Attach the ref here\n//       >\n//         <Background />\n//         <Controls />\n//       </ReactFlow>\n//       <div className=\"sidebar\">\n//         <h3>Drag Nodes</h3>\n//         <div\n//           className=\"drag-node\"\n//           draggable\n//           onDragStart={(event) => event.dataTransfer.setData('application/reactflow', 'inputNode')}\n//         >\n//           Input Node\n//           <InputNode data={{\n//             label: '',\n//             inputText: ''\n//           }} onChange={function (inputText: string): void {\n//             throw new Error('Function not implemented.');\n//           } } />\n//         </div>\n//         <div\n//           className=\"drag-node\"\n//           draggable\n//           onDragStart={(event) => event.dataTransfer.setData('application/reactflow', 'llmNode')}\n//         >\n//           LLM Node\n//         </div>\n//         <div\n//           className=\"drag-node\"\n//           draggable\n//           onDragStart={(event) => event.dataTransfer.setData('application/reactflow', 'outputNode')}\n//         >\n//           Output Node\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default App;\n\n// import React, { useState, useCallback } from 'react';\n// import axios from 'axios';\n// import ReactFlow, {\n//   addEdge,\n//   applyEdgeChanges,\n//   applyNodeChanges,\n//   Controls,\n//   Background,\n//   useReactFlow,\n//   NodeChange,\n//   EdgeChange,\n//   Connection,\n//   Edge,\n//   Node,\n//   ReactFlowProvider,\n// } from 'react-flow-renderer';\n// import { InputNode } from './components/InputNode';\n// import { LLMNode } from './components/LLMNode';\n// import { OutputNode } from './components/OutputNode';\n\n// const nodeTypes = {\n//   inputNode: InputNode,\n//   llmNode: LLMNode,\n//   outputNode: OutputNode,\n// };\n\n// const initialNodes: Node[] = [];\n\n// const App = () => {\n//   const [nodes, setNodes] = useState<Node[]>(initialNodes);\n//   const [edges, setEdges] = useState<Edge[]>([]);\n//   const [inputText, setInputText] = useState('');\n//   const [modelConfig, setModelConfig] = useState('');\n\n//   const { project } = useReactFlow();\n\n//   const onNodesChange = useCallback(\n//     (changes: NodeChange[]) => setNodes((nds) => applyNodeChanges(changes, nds)),\n//     []\n//   );\n\n//   const onEdgesChange = useCallback(\n//     (changes: EdgeChange[]) => setEdges((eds) => applyEdgeChanges(changes, eds)),\n//     []\n//   );\n\n//   const onConnect = useCallback(\n//     (params: Connection | Edge) => {\n//       setEdges((eds) => addEdge({ ...params, type: 'custom' }, eds));\n//     },\n//     []\n//   );\n\n//   const onDrop = useCallback(\n//     (event: React.DragEvent) => {\n//       event.preventDefault();\n//       const type = event.dataTransfer.getData('application/reactflow');\n//       const position = project({\n//         x: event.clientX,\n//         y: event.clientY,\n//       });\n\n//       if (type) {\n//         const newNode = {\n//           id: `${nodes.length + 1}`,\n//           type,\n//           position,\n//           data: { label: `${type} Node` },\n//         };\n//         setNodes((nds) => nds.concat(newNode));\n//       }\n//     },\n//     [nodes, project]\n//   );\n\n//   const onDragOver = useCallback((event: React.DragEvent) => {\n//     event.preventDefault();\n//     event.dataTransfer.dropEffect = 'move';\n//   }, []);\n\n//   const handleRunWorkflow = async () => {\n//     const inputNode = nodes.find((node) => node.type === 'inputNode');\n//     const llmNode = nodes.find((node) => node.type === 'llmNode');\n//     const outputNodeIndex = nodes.findIndex((node) => node.type === 'outputNode');\n\n//     if (!inputNode || !llmNode || outputNodeIndex === -1) {\n//       console.error(\"One or more nodes are not defined.\");\n//       alert(\"Please ensure that all nodes (Input, LLM, Output) are properly connected.\");\n//       return;\n//     }\n\n//     try {\n//       const response = await axios.post('https://api.openai.com/v1/chat/completions', {\n//         inputText: inputNode.data.inputText,\n//         modelConfig: llmNode.data.modelConfig,\n//       });\n\n//       const updatedNodes = [...nodes];\n//       updatedNodes[outputNodeIndex].data.output = response.data.result;\n//       setNodes(updatedNodes);\n//     } catch (error: any) {\n//       console.error(\"Error during API call:\", error.response ? error.response.data : error.message);\n//       alert(\"An error occurred while calling the API. Please try again.\");\n//     }\n//   };\n\n//   return (\n//     <ReactFlowProvider>\n//       <div style={{ height: '100vh' }}>\n//         <ReactFlow\n//           nodes={nodes}\n//           edges={edges}\n//           onNodesChange={onNodesChange}\n//           onEdgesChange={onEdgesChange}\n//           onConnect={onConnect}\n//           nodeTypes={nodeTypes}\n//           fitView onDrop={onDrop}\n//           onDragOver={onDragOver}\n//         >\n//           <Background />\n//           <Controls />\n//         </ReactFlow>\n//         <div className=\"sidebar\">\n//           <h3>Drag Nodes</h3>\n//           <div\n//             className=\"drag-node\"\n//             draggable\n//             onDragStart={(event) => event.dataTransfer.setData('application/reactflow', 'inputNode')}\n//           >\n//             Input Node\n//             <InputNode data={{ label: 'Enter your prompt', inputText: '' }} />\n//           </div>\n//           <div\n//             className=\"drag-node\"\n//             draggable\n//             onDragStart={(event) => event.dataTransfer.setData('application/reactflow', 'llmNode')}\n//           >\n//             LLM Node\n//             <LLMNode data={{ label: 'Model Config', modelConfig: '' }} />\n//           </div>\n//           <div\n//             className=\"drag-node\"\n//             draggable\n//             onDragStart={(event) => event.dataTransfer.setData('application/reactflow', 'outputNode')}\n//           >\n//             Output Node\n//           </div>\n//         </div>\n//         <button onClick={handleRunWorkflow} style={{ marginTop: '10px', padding: '10px' }}>\n//           Run Workflow\n//         </button>\n//       </div>\n\n//     </ReactFlowProvider>\n//   );\n// };\n\n// export default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["axios","ReactFlow","addEdge","applyEdgeChanges","applyNodeChanges","Controls","Background","InputNode","LLMNode","OutputNode","jsxDEV","_jsxDEV","initialNodes","id","type","position","x","y","data","label","inputText","modelConfig","output","initialEdges","nodeTypes","inputNode","llmNode","outputNode","App","_s","nodes","setNodes","useState","edges","setEdges","onNodesChange","useCallback","changes","nds","onEdgesChange","eds","onConnect","params","source","target","alert","handleRunWorkflow","find","node","outputNodeIndex","findIndex","console","error","response","post","model","modelName","temperature","maxTokens","topP","frequencyPenalty","presencePenalty","headers","process","env","REACT_APP_OPENAI_API_KEY","updatedNodes","result","message","style","height","children","fitView","fileName","_jsxFileName","lineNumber","columnNumber","onClick","marginTop","padding","_c","$RefreshReg$"],"sources":["D:/llm/llm-workflow-ui/src/App.tsx"],"sourcesContent":["// import React, { useState, useCallback } from 'react';\n// import dotenv from 'dotenv';\n// dotenv.config();\n// import axios from 'axios';\n// import ReactFlow, {\n//   addEdge,\n//   applyEdgeChanges,\n//   applyNodeChanges,\n//   Controls,\n//   Background,\n//   NodeChange,\n//   EdgeChange,\n//   Connection,\n//   Edge,\n//   Node,\n// } from 'react-flow-renderer';\n// import { InputNode } from './components/InputNode';\n// import { LLMNode } from \"./components/LLMNode\"\n// import { OutputNode } from './components/OutputNode';\n\n// // Define initial nodes and edges\n// const initialNodes: Node[] = [\n//   {\n//     id: '1',\n//     type: 'inputNode',\n//     position: { x: 250, y: 5 },\n//     data: { label: 'Input Node', inputText: '' },\n//   },\n//   {\n//     id: '2',\n//     type: 'llmNode',\n//     position: { x: 250, y: 100 },\n//     data: { label: 'LLM Node', modelConfig: {} },\n//   },\n//   {\n//     id: '3',\n//     type: 'outputNode',\n//     position: { x: 250, y: 200 },\n//     data: { label: 'Output Node', output: '' },\n//   },\n// ];\n\n// const initialEdges: Edge[] = [];\n\n// const nodeTypes = {\n//   inputNode: InputNode,\n//   llmNode: LLMNode,\n//   outputNode: OutputNode,\n// };\n\n// const App = () => {\n//   const [nodes, setNodes] = useState<Node[]>(initialNodes);\n//   const [edges, setEdges] = useState<Edge[]>(initialEdges);\n\n//   // Handle node changes\n//   const onNodesChange = useCallback(\n//     (changes: NodeChange[]) => setNodes((nds) => applyNodeChanges(changes, nds)),\n//     []\n//   );\n\n//   // Handle edge changes\n//   const onEdgesChange = useCallback(\n//     (changes: EdgeChange[]) => setEdges((eds) => applyEdgeChanges(changes, eds)),\n//     []\n//   );\n\n//   // Handle node connections (Input -> LLM -> Output)\n//   const onConnect = useCallback(\n//     (params: Connection | Edge) => {\n//       const { source, target } = params;\n\n//       // Define valid connection rules\n//       if (\n//         (source === '1' && target === '2') || // Input -> LLM\n//         (source === '2' && target === '3') // LLM -> Output\n//       ) {\n//         setEdges((eds) => addEdge(params, eds));\n//       } else {\n//         alert('Invalid connection! Follow Input -> LLM -> Output flow.');\n//       }\n//     },\n//     []\n//   );\n\n//   // Handle workflow execution\n//   const handleRunWorkflow = async () => {\n//     const inputNode = nodes.find((node) => node.type === 'inputNode');\n//     const llmNode = nodes.find((node) => node.type === 'llmNode');\n//     const outputNodeIndex = nodes.findIndex((node) => node.type === 'outputNode');\n  \n//     // Check if the required nodes are found\n//     if (!inputNode || !llmNode || outputNodeIndex === -1) {\n//       console.error(\"One or more nodes are not defined.\");\n//       alert(\"Please ensure that all nodes (Input, LLM, Output) are properly connected.\");\n//       return;\n//     }\n  \n//     try {\n//       const response = await axios.post('https://api.openai.com/v1/chat/completions', {\n//         inputText: inputNode.data.inputText,\n//         modelConfig: {\n//           model: llmNode.data.modelName,\n//           temperature: llmNode.data.temperature,\n//           maxTokens: llmNode.data.maxTokens,\n//           topP: llmNode.data.topP,\n//           frequencyPenalty: llmNode.data.frequencyPenalty,\n//           presencePenalty: llmNode.data.presencePenalty,\n//         },\n//       }, {\n//         headers: {\n//           'Authorization': `Bearer ${process.env.REACT_APP_OPENAI_API_KEY}`,\n//         },\n//       });\n  \n//       const updatedNodes = [...nodes];\n//       updatedNodes[outputNodeIndex].data.output = response.data.result; // Ensure you access the correct structure\n//       setNodes(updatedNodes);\n//     } catch (error: any) {  // Assert the error type to 'any'\n//       console.error(\"Error during API call:\", error.response ? error.response.data : error.message);\n//       alert(\"An error occurred while calling the API. Please try again.\");\n//     }\n//   };\n  \n\n//   return (\n//     <div style={{ height: '100vh' }}>\n//       <ReactFlow\n//         nodes={nodes}\n//         edges={edges}\n//         onNodesChange={onNodesChange}\n//         onEdgesChange={onEdgesChange}\n//         onConnect={onConnect}\n//         nodeTypes={nodeTypes}\n//         fitView\n//       >\n//         <Background />\n//         <Controls />\n//       </ReactFlow>\n//       <button onClick={handleRunWorkflow} style={{ marginTop: '10px', padding: '10px' }}>\n//         Run Workflow\n//       </button>\n//     </div>\n//   );\n// };\n// export default App;\n// import React, { useState, useCallback } from 'react';\nimport axios from 'axios';\nimport ReactFlow, {\n  addEdge,\n  applyEdgeChanges,\n  applyNodeChanges,\n  Controls,\n  Background,\n  NodeChange,\n  EdgeChange,\n  Connection,\n  Edge,\n  Node,\n} from 'react-flow-renderer';\nimport { InputNode } from './components/InputNode';\nimport { LLMNode } from \"./components/LLMNode\"\nimport { OutputNode } from './components/OutputNode';\n\nconst initialNodes: Node[] = [\n  {\n    id: '1',\n    type: 'inputNode',\n    position: { x: 250, y: 5 },\n    data: { label: 'Input Node', inputText: '' },\n  },\n  {\n    id: '2',\n    type: 'llmNode',\n    position: { x: 250, y: 100 },\n    data: { label: 'LLM Node', modelConfig: {} },\n  },\n  {\n    id: '3',\n    type: 'outputNode',\n    position: { x: 250, y: 200 },\n    data: { label: 'Output Node', output: '' },\n  },\n];\n\nconst initialEdges: Edge[] = [];\n\nconst nodeTypes = {\n  inputNode: InputNode,\n  llmNode: LLMNode,\n  outputNode: OutputNode,\n};\n\nconst App = () => {\n  const [nodes, setNodes] = useState<Node[]>(initialNodes);\n  const [edges, setEdges] = useState<Edge[]>(initialEdges);\n\n  const onNodesChange = useCallback(\n    (changes: NodeChange[]) => setNodes((nds) => applyNodeChanges(changes, nds)),\n    []\n  );\n\n  const onEdgesChange = useCallback(\n    (changes: EdgeChange[]) => setEdges((eds) => applyEdgeChanges(changes, eds)),\n    []\n  );\n\n  const onConnect = useCallback(\n    (params: Connection | Edge) => {\n      const { source, target } = params;\n\n      if (\n        (source === '1' && target === '2') ||\n        (source === '2' && target === '3')\n      ) {\n        setEdges((eds) => addEdge(params, eds));\n      } else {\n        alert('Invalid connection! Follow Input -> LLM -> Output flow.');\n      }\n    },\n    []\n  );\n\n  const handleRunWorkflow = async () => {\n    const inputNode = nodes.find((node) => node.type === 'inputNode');\n    const llmNode = nodes.find((node) => node.type === 'llmNode');\n    const outputNodeIndex = nodes.findIndex((node) => node.type === 'outputNode');\n\n    if (!inputNode || !llmNode || outputNodeIndex === -1) {\n      console.error(\"One or more nodes are not defined.\");\n      alert(\"Please ensure that all nodes (Input, LLM, Output) are properly connected.\");\n      return;\n    }\n\n    try {\n      const response = await axios.post('https://api.openai.com/v1/chat/completions', {\n        inputText: inputNode.data.inputText,\n        modelConfig: {\n          model: llmNode.data.modelName,\n          temperature: llmNode.data.temperature,\n          maxTokens: llmNode.data.maxTokens,\n          topP: llmNode.data.topP,\n          frequencyPenalty: llmNode.data.frequencyPenalty,\n          presencePenalty: llmNode.data.presencePenalty,\n        },\n      }, {\n        headers: {\n          'Authorization': `Bearer ${process.env.REACT_APP_OPENAI_API_KEY}`,\n        },\n      });\n\n      const updatedNodes = [...nodes];\n      updatedNodes[outputNodeIndex].data.output = response.data.result;\n      setNodes(updatedNodes);\n    } catch (error: any) {\n      console.error(\"Error during API call:\", error.response ? error.response.data : error.message);\n      alert(\"An error occurred while calling the API. Please try again.\");\n    }\n  };\n\n  return (\n    <div style={{ height: '100vh' }}>\n      <ReactFlow\n        nodes={nodes}\n        edges={edges}\n        onNodesChange={onNodesChange}\n        onEdgesChange={onEdgesChange}\n        onConnect={onConnect}\n        nodeTypes={nodeTypes}\n        fitView\n      >\n        <Background />\n        <Controls />\n      </ReactFlow>\n      <button onClick={handleRunWorkflow} style={{ marginTop: '10px', padding: '10px' }}>\n        Run Workflow\n      </button>\n    </div>\n  );\n};\n\nexport default App;\n\n\n\n\n\n\n// App.tsx\n// App.tsx\n// import React, { useState, useCallback, useRef } from 'react';\n// import ReactFlow, {\n//   addEdge,\n//   applyEdgeChanges,\n//   applyNodeChanges,\n//   Controls,\n//   Background,\n//   NodeChange,\n//   EdgeChange,\n//   Connection,\n//   Edge,\n//   Node,\n//   ReactFlowProvider,\n// } from 'react-flow-renderer';\n// import { InputNode } from './components/InputNode';\n// import { LLMNode } from './components/LLMNode';\n// import { OutputNode } from './components/OutputNode';\n//  // Import your custom edge if needed\n\n// const nodeTypes = {\n//   inputNode: InputNode,\n//   llmNode: LLMNode,\n//   outputNode: OutputNode,\n// };\n\n// // const edgeTypes = {\n// //   custom: CustomEdge, \n//   // Use your custom edge if needed\n// // };\n\n// const initialNodes: Node[] = [];\n\n// const App = () => {\n//   const [nodes, setNodes] = useState<Node[]>(initialNodes);\n//   const [edges, setEdges] = useState<Edge[]>([]);\n  \n//   // Create a ref for the ReactFlow instance\n//   const reactFlowInstance = useRef<any>(null);\n\n//   // Handle node changes\n//   const onNodesChange = useCallback(\n//     (changes: NodeChange[]) => setNodes((nds) => applyNodeChanges(changes, nds)),\n//     []\n//   );\n\n//   // Handle edge changes\n//   const onEdgesChange = useCallback(\n//     (changes: EdgeChange[]) => setEdges((eds) => applyEdgeChanges(changes, eds)),\n//     []\n//   );\n\n//   // Handle connections\n//   const onConnect = useCallback(\n//     (params: Connection | Edge) => {\n//       setEdges((eds) => addEdge({ ...params, type: 'custom' }, eds));\n//     },\n//     []\n//   );\n\n//   // Drag-and-drop functionality\n//   const onDrop = useCallback(\n//     (event: React.DragEvent) => {\n//       event.preventDefault();\n//       const type = event.dataTransfer.getData('application/reactflow');\n//       const position = reactFlowInstance.current.project({\n//         x: event.clientX,\n//         y: event.clientY,\n//       });\n\n//       if (type) {\n//         const newNode = {\n//           id: `${nodes.length + 1}`,\n//           type,\n//           position,\n//           data: { label: `${type} Node` }, // Customize this according to your node types\n//         };\n//         setNodes((nds) => nds.concat(newNode));\n//       }\n//     },\n//     [nodes]\n//   );\n\n//   const onDragOver = useCallback((event: React.DragEvent) => {\n//     event.preventDefault();\n//     event.dataTransfer.dropEffect = 'move';\n//   }, []);\n\n//   return (\n//     <div style={{ height: '100vh' }}>\n//       <ReactFlow\n//         nodes={nodes}\n//         edges={edges}\n//         onNodesChange={onNodesChange}\n//         onEdgesChange={onEdgesChange}\n//         onConnect={onConnect}\n//         nodeTypes={nodeTypes}\n//         // edgeTypes={edgeTypes}\n//         fitView\n//         onDrop={onDrop}\n//         onDragOver={onDragOver}\n//         ref={reactFlowInstance} // Attach the ref here\n//       >\n//         <Background />\n//         <Controls />\n//       </ReactFlow>\n//       <div className=\"sidebar\">\n//         <h3>Drag Nodes</h3>\n//         <div\n//           className=\"drag-node\"\n//           draggable\n//           onDragStart={(event) => event.dataTransfer.setData('application/reactflow', 'inputNode')}\n//         >\n//           Input Node\n//           <InputNode data={{\n//             label: '',\n//             inputText: ''\n//           }} onChange={function (inputText: string): void {\n//             throw new Error('Function not implemented.');\n//           } } />\n//         </div>\n//         <div\n//           className=\"drag-node\"\n//           draggable\n//           onDragStart={(event) => event.dataTransfer.setData('application/reactflow', 'llmNode')}\n//         >\n//           LLM Node\n//         </div>\n//         <div\n//           className=\"drag-node\"\n//           draggable\n//           onDragStart={(event) => event.dataTransfer.setData('application/reactflow', 'outputNode')}\n//         >\n//           Output Node\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default App;\n\n\n\n\n\n// import React, { useState, useCallback } from 'react';\n// import axios from 'axios';\n// import ReactFlow, {\n//   addEdge,\n//   applyEdgeChanges,\n//   applyNodeChanges,\n//   Controls,\n//   Background,\n//   useReactFlow,\n//   NodeChange,\n//   EdgeChange,\n//   Connection,\n//   Edge,\n//   Node,\n//   ReactFlowProvider,\n// } from 'react-flow-renderer';\n// import { InputNode } from './components/InputNode';\n// import { LLMNode } from './components/LLMNode';\n// import { OutputNode } from './components/OutputNode';\n\n// const nodeTypes = {\n//   inputNode: InputNode,\n//   llmNode: LLMNode,\n//   outputNode: OutputNode,\n// };\n\n// const initialNodes: Node[] = [];\n\n// const App = () => {\n//   const [nodes, setNodes] = useState<Node[]>(initialNodes);\n//   const [edges, setEdges] = useState<Edge[]>([]);\n//   const [inputText, setInputText] = useState('');\n//   const [modelConfig, setModelConfig] = useState('');\n\n//   const { project } = useReactFlow();\n\n//   const onNodesChange = useCallback(\n//     (changes: NodeChange[]) => setNodes((nds) => applyNodeChanges(changes, nds)),\n//     []\n//   );\n\n//   const onEdgesChange = useCallback(\n//     (changes: EdgeChange[]) => setEdges((eds) => applyEdgeChanges(changes, eds)),\n//     []\n//   );\n\n//   const onConnect = useCallback(\n//     (params: Connection | Edge) => {\n//       setEdges((eds) => addEdge({ ...params, type: 'custom' }, eds));\n//     },\n//     []\n//   );\n\n//   const onDrop = useCallback(\n//     (event: React.DragEvent) => {\n//       event.preventDefault();\n//       const type = event.dataTransfer.getData('application/reactflow');\n//       const position = project({\n//         x: event.clientX,\n//         y: event.clientY,\n//       });\n\n//       if (type) {\n//         const newNode = {\n//           id: `${nodes.length + 1}`,\n//           type,\n//           position,\n//           data: { label: `${type} Node` },\n//         };\n//         setNodes((nds) => nds.concat(newNode));\n//       }\n//     },\n//     [nodes, project]\n//   );\n\n//   const onDragOver = useCallback((event: React.DragEvent) => {\n//     event.preventDefault();\n//     event.dataTransfer.dropEffect = 'move';\n//   }, []);\n\n//   const handleRunWorkflow = async () => {\n//     const inputNode = nodes.find((node) => node.type === 'inputNode');\n//     const llmNode = nodes.find((node) => node.type === 'llmNode');\n//     const outputNodeIndex = nodes.findIndex((node) => node.type === 'outputNode');\n  \n//     if (!inputNode || !llmNode || outputNodeIndex === -1) {\n//       console.error(\"One or more nodes are not defined.\");\n//       alert(\"Please ensure that all nodes (Input, LLM, Output) are properly connected.\");\n//       return;\n//     }\n  \n//     try {\n//       const response = await axios.post('https://api.openai.com/v1/chat/completions', {\n//         inputText: inputNode.data.inputText,\n//         modelConfig: llmNode.data.modelConfig,\n//       });\n  \n//       const updatedNodes = [...nodes];\n//       updatedNodes[outputNodeIndex].data.output = response.data.result;\n//       setNodes(updatedNodes);\n//     } catch (error: any) {\n//       console.error(\"Error during API call:\", error.response ? error.response.data : error.message);\n//       alert(\"An error occurred while calling the API. Please try again.\");\n//     }\n//   };\n\n//   return (\n//     <ReactFlowProvider>\n//       <div style={{ height: '100vh' }}>\n//         <ReactFlow\n//           nodes={nodes}\n//           edges={edges}\n//           onNodesChange={onNodesChange}\n//           onEdgesChange={onEdgesChange}\n//           onConnect={onConnect}\n//           nodeTypes={nodeTypes}\n//           fitView onDrop={onDrop}\n//           onDragOver={onDragOver}\n//         >\n//           <Background />\n//           <Controls />\n//         </ReactFlow>\n//         <div className=\"sidebar\">\n//           <h3>Drag Nodes</h3>\n//           <div\n//             className=\"drag-node\"\n//             draggable\n//             onDragStart={(event) => event.dataTransfer.setData('application/reactflow', 'inputNode')}\n//           >\n//             Input Node\n//             <InputNode data={{ label: 'Enter your prompt', inputText: '' }} />\n//           </div>\n//           <div\n//             className=\"drag-node\"\n//             draggable\n//             onDragStart={(event) => event.dataTransfer.setData('application/reactflow', 'llmNode')}\n//           >\n//             LLM Node\n//             <LLMNode data={{ label: 'Model Config', modelConfig: '' }} />\n//           </div>\n//           <div\n//             className=\"drag-node\"\n//             draggable\n//             onDragStart={(event) => event.dataTransfer.setData('application/reactflow', 'outputNode')}\n//           >\n//             Output Node\n//           </div>\n//         </div>\n//         <button onClick={handleRunWorkflow} style={{ marginTop: '10px', padding: '10px' }}>\n//           Run Workflow\n//         </button>\n//       </div>\n    \n//     </ReactFlowProvider>\n//   );\n// };\n\n// export default App;"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,IACdC,OAAO,EACPC,gBAAgB,EAChBC,gBAAgB,EAChBC,QAAQ,EACRC,UAAU,QAML,qBAAqB;AAC5B,SAASC,SAAS,QAAQ,wBAAwB;AAClD,SAASC,OAAO,QAAQ,sBAAsB;AAC9C,SAASC,UAAU,QAAQ,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErD,MAAMC,YAAoB,GAAG,CAC3B;EACEC,EAAE,EAAE,GAAG;EACPC,IAAI,EAAE,WAAW;EACjBC,QAAQ,EAAE;IAAEC,CAAC,EAAE,GAAG;IAAEC,CAAC,EAAE;EAAE,CAAC;EAC1BC,IAAI,EAAE;IAAEC,KAAK,EAAE,YAAY;IAAEC,SAAS,EAAE;EAAG;AAC7C,CAAC,EACD;EACEP,EAAE,EAAE,GAAG;EACPC,IAAI,EAAE,SAAS;EACfC,QAAQ,EAAE;IAAEC,CAAC,EAAE,GAAG;IAAEC,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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}