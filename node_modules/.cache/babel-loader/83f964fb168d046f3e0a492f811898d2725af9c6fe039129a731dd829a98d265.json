{"ast":null,"code":"// import  { useState, useCallback } from 'react';\n// // import dotenv from 'dotenv';\n// // dotenv.config();\n\n// import axios from 'axios';\n// import ReactFlow, {\n//   addEdge,\n//   applyEdgeChanges,\n//   applyNodeChanges,\n//   Controls,\n//   Background,\n//   NodeChange,\n//   EdgeChange,\n//   Connection,\n//   Edge,\n//   Node,\n// } from 'react-flow-renderer';\n// import { InputNode } from './components/InputNode';\n// import { LLMNode } from \"./components/LLMNode\"\n// import { OutputNode } from './components/OutputNode';\n\n// // Define initial nodes and edges\n// const initialNodes: Node[] = [\n//   {\n//     id: '1',\n//     type: 'inputNode',\n//     position: { x: 250, y: 5 },\n//     data: { label: 'Input Node', inputText: '' },\n//   },\n//   {\n//     id: '2',\n//     type: 'llmNode',\n//     position: { x: 250, y: 100 },\n//     data: { label: 'LLM Node', modelConfig: {} },\n//   },\n//   {\n//     id: '3',\n//     type: 'outputNode',\n//     position: { x: 250, y: 200 },\n//     data: { label: 'Output Node', output: '' },\n//   },\n// ];\n\n// const initialEdges: Edge[] = [];\n\n// const nodeTypes = {\n//   inputNode: InputNode,\n//   llmNode: LLMNode,\n//   outputNode: OutputNode,\n// };\n\n// const App = () => {\n//   const [nodes, setNodes] = useState<Node[]>(initialNodes);\n//   const [edges, setEdges] = useState<Edge[]>(initialEdges);\n\n//   // Handle node changes\n//   const onNodesChange = useCallback(\n//     (changes: NodeChange[]) => setNodes((nds) => applyNodeChanges(changes, nds)),\n//     []\n//   );\n\n//   // Handle edge changes\n//   const onEdgesChange = useCallback(\n//     (changes: EdgeChange[]) => setEdges((eds) => applyEdgeChanges(changes, eds)),\n//     []\n//   );\n\n//   // Handle node connections (Input -> LLM -> Output)\n//   const onConnect = useCallback(\n//     (params: Connection | Edge) => {\n//       const { source, target } = params;\n\n//       // Define valid connection rules\n//       if (\n//         (source === '1' && target === '2') || // Input -> LLM\n//         (source === '2' && target === '3') // LLM -> Output\n//       ) {\n//         setEdges((eds) => addEdge(params, eds));\n//       } else {\n//         alert('Invalid connection! Follow Input -> LLM -> Output flow.');\n//       }\n//     },\n//     []\n//   );\n\n//   // Handle workflow execution\n//   const handleRunWorkflow = async () => {\n//     const inputNode = nodes.find((node) => node.type === 'inputNode');\n//     const llmNode = nodes.find((node) => node.type === 'llmNode');\n//     const outputNodeIndex = nodes.findIndex((node) => node.type === 'outputNode');\n\n//     // Check if the required nodes are found\n//     if (!inputNode || !llmNode || outputNodeIndex === -1) {\n//       console.error(\"One or more nodes are not defined.\");\n//       alert(\"Please ensure that all nodes (Input, LLM, Output) are properly connected.\");\n//       return;\n//     }\n\n//     try {\n//       const response = await axios.post('https://api.openai.com/v1/chat/completions', {\n//         inputText: inputNode.data.inputText,\n//         modelConfig: {\n//           model: llmNode.data.modelName,\n//           temperature: llmNode.data.temperature,\n//           maxTokens: llmNode.data.maxTokens,\n//           topP: llmNode.data.topP,\n//           frequencyPenalty: llmNode.data.frequencyPenalty,\n//           presencePenalty: llmNode.data.presencePenalty,\n//         },\n//       }, {\n//         headers: {\n//           'Authorization': `Bearer ${process.env.REACT_APP_OPENAI_API_KEY}`,\n//         },\n//       });\n\n//       const updatedNodes = [...nodes];\n//       updatedNodes[outputNodeIndex].data.output = response.data.result; // Ensure you access the correct structure\n//       setNodes(updatedNodes);\n//     } catch (error: any) {  // Assert the error type to 'any'\n//       console.error(\"Error during API call:\", error.response ? error.response.data : error.message);\n//       alert(\"An error occurred while calling the API. Please try again.\");\n//     }\n//   };\n\n//   return (\n//     <div style={{ height: '100vh' }}>\n//       <ReactFlow\n//         nodes={nodes}\n//         edges={edges}\n//         onNodesChange={onNodesChange}\n//         onEdgesChange={onEdgesChange}\n//         onConnect={onConnect}\n//         nodeTypes={nodeTypes}\n//         fitView\n//       >\n//         <Background />\n//         <Controls />\n//       </ReactFlow>\n//       <button onClick={handleRunWorkflow} style={{ marginTop: '10px', padding: '10px' }}>\n//         Run Workflow\n//       </button>\n//     </div>\n//   );\n// };\n// export default App;\n\n// App.tsx\n// App.tsx\n// import React, { useState, useCallback, useRef } from 'react';\n// import ReactFlow, {\n//   addEdge,\n//   applyEdgeChanges,\n//   applyNodeChanges,\n//   Controls,\n//   Background,\n//   NodeChange,\n//   EdgeChange,\n//   Connection,\n//   Edge,\n//   Node,\n//   ReactFlowProvider,\n// } from 'react-flow-renderer';\n// import { InputNode } from './components/InputNode';\n// import { LLMNode } from './components/LLMNode';\n// import { OutputNode } from './components/OutputNode';\n//  // Import your custom edge if needed\n\n// const nodeTypes = {\n//   inputNode: InputNode,\n//   llmNode: LLMNode,\n//   outputNode: OutputNode,\n// };\n\n// // const edgeTypes = {\n// //   custom: CustomEdge, \n//   // Use your custom edge if needed\n// // };\n\n// const initialNodes: Node[] = [];\n\n// const App = () => {\n//   const [nodes, setNodes] = useState<Node[]>(initialNodes);\n//   const [edges, setEdges] = useState<Edge[]>([]);\n\n//   // Create a ref for the ReactFlow instance\n//   const reactFlowInstance = useRef<any>(null);\n\n//   // Handle node changes\n//   const onNodesChange = useCallback(\n//     (changes: NodeChange[]) => setNodes((nds) => applyNodeChanges(changes, nds)),\n//     []\n//   );\n\n//   // Handle edge changes\n//   const onEdgesChange = useCallback(\n//     (changes: EdgeChange[]) => setEdges((eds) => applyEdgeChanges(changes, eds)),\n//     []\n//   );\n\n//   // Handle connections\n//   const onConnect = useCallback(\n//     (params: Connection | Edge) => {\n//       setEdges((eds) => addEdge({ ...params, type: 'custom' }, eds));\n//     },\n//     []\n//   );\n\n//   // Drag-and-drop functionality\n//   const onDrop = useCallback(\n//     (event: React.DragEvent) => {\n//       event.preventDefault();\n//       const type = event.dataTransfer.getData('application/reactflow');\n//       const position = reactFlowInstance.current.project({\n//         x: event.clientX,\n//         y: event.clientY,\n//       });\n\n//       if (type) {\n//         const newNode = {\n//           id: `${nodes.length + 1}`,\n//           type,\n//           position,\n//           data: { label: `${type} Node` }, // Customize this according to your node types\n//         };\n//         setNodes((nds) => nds.concat(newNode));\n//       }\n//     },\n//     [nodes]\n//   );\n\n//   const onDragOver = useCallback((event: React.DragEvent) => {\n//     event.preventDefault();\n//     event.dataTransfer.dropEffect = 'move';\n//   }, []);\n\n//   return (\n//     <div style={{ height: '100vh' }}>\n//       <ReactFlow\n//         nodes={nodes}\n//         edges={edges}\n//         onNodesChange={onNodesChange}\n//         onEdgesChange={onEdgesChange}\n//         onConnect={onConnect}\n//         nodeTypes={nodeTypes}\n//         // edgeTypes={edgeTypes}\n//         fitView\n//         onDrop={onDrop}\n//         onDragOver={onDragOver}\n//         ref={reactFlowInstance} // Attach the ref here\n//       >\n//         <Background />\n//         <Controls />\n//       </ReactFlow>\n//       <div className=\"sidebar\">\n//         <h3>Drag Nodes</h3>\n//         <div\n//           className=\"drag-node\"\n//           draggable\n//           onDragStart={(event) => event.dataTransfer.setData('application/reactflow', 'inputNode')}\n//         >\n//           Input Node\n//           <InputNode data={{\n//             label: '',\n//             inputText: ''\n//           }} onChange={function (inputText: string): void {\n//             throw new Error('Function not implemented.');\n//           } } />\n//         </div>\n//         <div\n//           className=\"drag-node\"\n//           draggable\n//           onDragStart={(event) => event.dataTransfer.setData('application/reactflow', 'llmNode')}\n//         >\n//           LLM Node\n//         </div>\n//         <div\n//           className=\"drag-node\"\n//           draggable\n//           onDragStart={(event) => event.dataTransfer.setData('application/reactflow', 'outputNode')}\n//         >\n//           Output Node\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default App;\n\n// import React, { useState, useCallback } from 'react';\n// import axios from 'axios';\n// import ReactFlow, {\n//   addEdge,\n//   applyEdgeChanges,\n//   applyNodeChanges,\n//   Controls,\n//   Background,\n//   useReactFlow,\n//   NodeChange,\n//   EdgeChange,\n//   Connection,\n//   Edge,\n//   Node,\n//   ReactFlowProvider,\n// } from 'react-flow-renderer';\n// import { InputNode } from './components/InputNode';\n// import { LLMNode } from './components/LLMNode';\n// import { OutputNode } from './components/OutputNode';\n\n// const nodeTypes = {\n//   inputNode: InputNode,\n//   llmNode: LLMNode,\n//   outputNode: OutputNode,\n// };\n\n// const initialNodes: Node[] = [];\n\n// const App = () => {\n//   const [nodes, setNodes] = useState<Node[]>(initialNodes);\n//   const [edges, setEdges] = useState<Edge[]>([]);\n//   const [inputText, setInputText] = useState('');\n//   const [modelConfig, setModelConfig] = useState('');\n\n//   const { project } = useReactFlow();\n\n//   const onNodesChange = useCallback(\n//     (changes: NodeChange[]) => setNodes((nds) => applyNodeChanges(changes, nds)),\n//     []\n//   );\n\n//   const onEdgesChange = useCallback(\n//     (changes: EdgeChange[]) => setEdges((eds) => applyEdgeChanges(changes, eds)),\n//     []\n//   );\n\n//   const onConnect = useCallback(\n//     (params: Connection | Edge) => {\n//       setEdges((eds) => addEdge({ ...params, type: 'custom' }, eds));\n//     },\n//     []\n//   );\n\n//   const onDrop = useCallback(\n//     (event: React.DragEvent) => {\n//       event.preventDefault();\n//       const type = event.dataTransfer.getData('application/reactflow');\n//       const position = project({\n//         x: event.clientX,\n//         y: event.clientY,\n//       });\n\n//       if (type) {\n//         const newNode = {\n//           id: `${nodes.length + 1}`,\n//           type,\n//           position,\n//           data: { label: `${type} Node` },\n//         };\n//         setNodes((nds) => nds.concat(newNode));\n//       }\n//     },\n//     [nodes, project]\n//   );\n\n//   const onDragOver = useCallback((event: React.DragEvent) => {\n//     event.preventDefault();\n//     event.dataTransfer.dropEffect = 'move';\n//   }, []);\n\n//   const handleRunWorkflow = async () => {\n//     const inputNode = nodes.find((node) => node.type === 'inputNode');\n//     const llmNode = nodes.find((node) => node.type === 'llmNode');\n//     const outputNodeIndex = nodes.findIndex((node) => node.type === 'outputNode');\n\n//     if (!inputNode || !llmNode || outputNodeIndex === -1) {\n//       console.error(\"One or more nodes are not defined.\");\n//       alert(\"Please ensure that all nodes (Input, LLM, Output) are properly connected.\");\n//       return;\n//     }\n\n//     try {\n//       const response = await axios.post('https://api.openai.com/v1/chat/completions', {\n//         inputText: inputNode.data.inputText,\n//         modelConfig: llmNode.data.modelConfig,\n//       });\n\n//       const updatedNodes = [...nodes];\n//       updatedNodes[outputNodeIndex].data.output = response.data.result;\n//       setNodes(updatedNodes);\n//     } catch (error: any) {\n//       console.error(\"Error during API call:\", error.response ? error.response.data : error.message);\n//       alert(\"An error occurred while calling the API. Please try again.\");\n//     }\n//   };\n\n//   return (\n//     <ReactFlowProvider>\n//       <div style={{ height: '100vh' }}>\n//         <ReactFlow\n//           nodes={nodes}\n//           edges={edges}\n//           onNodesChange={onNodesChange}\n//           onEdgesChange={onEdgesChange}\n//           onConnect={onConnect}\n//           nodeTypes={nodeTypes}\n//           fitView onDrop={onDrop}\n//           onDragOver={onDragOver}\n//         >\n//           <Background />\n//           <Controls />\n//         </ReactFlow>\n//         <div className=\"sidebar\">\n//           <h3>Drag Nodes</h3>\n//           <div\n//             className=\"drag-node\"\n//             draggable\n//             onDragStart={(event) => event.dataTransfer.setData('application/reactflow', 'inputNode')}\n//           >\n//             Input Node\n//             <InputNode data={{ label: 'Enter your prompt', inputText: '' }} />\n//           </div>\n//           <div\n//             className=\"drag-node\"\n//             draggable\n//             onDragStart={(event) => event.dataTransfer.setData('application/reactflow', 'llmNode')}\n//           >\n//             LLM Node\n//             <LLMNode data={{ label: 'Model Config', modelConfig: '' }} />\n//           </div>\n//           <div\n//             className=\"drag-node\"\n//             draggable\n//             onDragStart={(event) => event.dataTransfer.setData('application/reactflow', 'outputNode')}\n//           >\n//             Output Node\n//           </div>\n//         </div>\n//         <button onClick={handleRunWorkflow} style={{ marginTop: '10px', padding: '10px' }}>\n//           Run Workflow\n//         </button>\n//       </div>\n\n//     </ReactFlowProvider>\n//   );\n// };\n\n// export default App;","map":{"version":3,"names":[],"sources":["D:/llm/llm-workflow-ui/src/App.tsx"],"sourcesContent":["// import  { useState, useCallback } from 'react';\n// // import dotenv from 'dotenv';\n// // dotenv.config();\n\n// import axios from 'axios';\n// import ReactFlow, {\n//   addEdge,\n//   applyEdgeChanges,\n//   applyNodeChanges,\n//   Controls,\n//   Background,\n//   NodeChange,\n//   EdgeChange,\n//   Connection,\n//   Edge,\n//   Node,\n// } from 'react-flow-renderer';\n// import { InputNode } from './components/InputNode';\n// import { LLMNode } from \"./components/LLMNode\"\n// import { OutputNode } from './components/OutputNode';\n\n// // Define initial nodes and edges\n// const initialNodes: Node[] = [\n//   {\n//     id: '1',\n//     type: 'inputNode',\n//     position: { x: 250, y: 5 },\n//     data: { label: 'Input Node', inputText: '' },\n//   },\n//   {\n//     id: '2',\n//     type: 'llmNode',\n//     position: { x: 250, y: 100 },\n//     data: { label: 'LLM Node', modelConfig: {} },\n//   },\n//   {\n//     id: '3',\n//     type: 'outputNode',\n//     position: { x: 250, y: 200 },\n//     data: { label: 'Output Node', output: '' },\n//   },\n// ];\n\n// const initialEdges: Edge[] = [];\n\n// const nodeTypes = {\n//   inputNode: InputNode,\n//   llmNode: LLMNode,\n//   outputNode: OutputNode,\n// };\n\n// const App = () => {\n//   const [nodes, setNodes] = useState<Node[]>(initialNodes);\n//   const [edges, setEdges] = useState<Edge[]>(initialEdges);\n\n//   // Handle node changes\n//   const onNodesChange = useCallback(\n//     (changes: NodeChange[]) => setNodes((nds) => applyNodeChanges(changes, nds)),\n//     []\n//   );\n\n//   // Handle edge changes\n//   const onEdgesChange = useCallback(\n//     (changes: EdgeChange[]) => setEdges((eds) => applyEdgeChanges(changes, eds)),\n//     []\n//   );\n\n//   // Handle node connections (Input -> LLM -> Output)\n//   const onConnect = useCallback(\n//     (params: Connection | Edge) => {\n//       const { source, target } = params;\n\n//       // Define valid connection rules\n//       if (\n//         (source === '1' && target === '2') || // Input -> LLM\n//         (source === '2' && target === '3') // LLM -> Output\n//       ) {\n//         setEdges((eds) => addEdge(params, eds));\n//       } else {\n//         alert('Invalid connection! Follow Input -> LLM -> Output flow.');\n//       }\n//     },\n//     []\n//   );\n\n//   // Handle workflow execution\n//   const handleRunWorkflow = async () => {\n//     const inputNode = nodes.find((node) => node.type === 'inputNode');\n//     const llmNode = nodes.find((node) => node.type === 'llmNode');\n//     const outputNodeIndex = nodes.findIndex((node) => node.type === 'outputNode');\n  \n//     // Check if the required nodes are found\n//     if (!inputNode || !llmNode || outputNodeIndex === -1) {\n//       console.error(\"One or more nodes are not defined.\");\n//       alert(\"Please ensure that all nodes (Input, LLM, Output) are properly connected.\");\n//       return;\n//     }\n  \n//     try {\n//       const response = await axios.post('https://api.openai.com/v1/chat/completions', {\n//         inputText: inputNode.data.inputText,\n//         modelConfig: {\n//           model: llmNode.data.modelName,\n//           temperature: llmNode.data.temperature,\n//           maxTokens: llmNode.data.maxTokens,\n//           topP: llmNode.data.topP,\n//           frequencyPenalty: llmNode.data.frequencyPenalty,\n//           presencePenalty: llmNode.data.presencePenalty,\n//         },\n//       }, {\n//         headers: {\n//           'Authorization': `Bearer ${process.env.REACT_APP_OPENAI_API_KEY}`,\n//         },\n//       });\n  \n//       const updatedNodes = [...nodes];\n//       updatedNodes[outputNodeIndex].data.output = response.data.result; // Ensure you access the correct structure\n//       setNodes(updatedNodes);\n//     } catch (error: any) {  // Assert the error type to 'any'\n//       console.error(\"Error during API call:\", error.response ? error.response.data : error.message);\n//       alert(\"An error occurred while calling the API. Please try again.\");\n//     }\n//   };\n  \n\n//   return (\n//     <div style={{ height: '100vh' }}>\n//       <ReactFlow\n//         nodes={nodes}\n//         edges={edges}\n//         onNodesChange={onNodesChange}\n//         onEdgesChange={onEdgesChange}\n//         onConnect={onConnect}\n//         nodeTypes={nodeTypes}\n//         fitView\n//       >\n//         <Background />\n//         <Controls />\n//       </ReactFlow>\n//       <button onClick={handleRunWorkflow} style={{ marginTop: '10px', padding: '10px' }}>\n//         Run Workflow\n//       </button>\n//     </div>\n//   );\n// };\n// export default App;\n\n\n\n\n\n\n// App.tsx\n// App.tsx\n// import React, { useState, useCallback, useRef } from 'react';\n// import ReactFlow, {\n//   addEdge,\n//   applyEdgeChanges,\n//   applyNodeChanges,\n//   Controls,\n//   Background,\n//   NodeChange,\n//   EdgeChange,\n//   Connection,\n//   Edge,\n//   Node,\n//   ReactFlowProvider,\n// } from 'react-flow-renderer';\n// import { InputNode } from './components/InputNode';\n// import { LLMNode } from './components/LLMNode';\n// import { OutputNode } from './components/OutputNode';\n//  // Import your custom edge if needed\n\n// const nodeTypes = {\n//   inputNode: InputNode,\n//   llmNode: LLMNode,\n//   outputNode: OutputNode,\n// };\n\n// // const edgeTypes = {\n// //   custom: CustomEdge, \n//   // Use your custom edge if needed\n// // };\n\n// const initialNodes: Node[] = [];\n\n// const App = () => {\n//   const [nodes, setNodes] = useState<Node[]>(initialNodes);\n//   const [edges, setEdges] = useState<Edge[]>([]);\n  \n//   // Create a ref for the ReactFlow instance\n//   const reactFlowInstance = useRef<any>(null);\n\n//   // Handle node changes\n//   const onNodesChange = useCallback(\n//     (changes: NodeChange[]) => setNodes((nds) => applyNodeChanges(changes, nds)),\n//     []\n//   );\n\n//   // Handle edge changes\n//   const onEdgesChange = useCallback(\n//     (changes: EdgeChange[]) => setEdges((eds) => applyEdgeChanges(changes, eds)),\n//     []\n//   );\n\n//   // Handle connections\n//   const onConnect = useCallback(\n//     (params: Connection | Edge) => {\n//       setEdges((eds) => addEdge({ ...params, type: 'custom' }, eds));\n//     },\n//     []\n//   );\n\n//   // Drag-and-drop functionality\n//   const onDrop = useCallback(\n//     (event: React.DragEvent) => {\n//       event.preventDefault();\n//       const type = event.dataTransfer.getData('application/reactflow');\n//       const position = reactFlowInstance.current.project({\n//         x: event.clientX,\n//         y: event.clientY,\n//       });\n\n//       if (type) {\n//         const newNode = {\n//           id: `${nodes.length + 1}`,\n//           type,\n//           position,\n//           data: { label: `${type} Node` }, // Customize this according to your node types\n//         };\n//         setNodes((nds) => nds.concat(newNode));\n//       }\n//     },\n//     [nodes]\n//   );\n\n//   const onDragOver = useCallback((event: React.DragEvent) => {\n//     event.preventDefault();\n//     event.dataTransfer.dropEffect = 'move';\n//   }, []);\n\n//   return (\n//     <div style={{ height: '100vh' }}>\n//       <ReactFlow\n//         nodes={nodes}\n//         edges={edges}\n//         onNodesChange={onNodesChange}\n//         onEdgesChange={onEdgesChange}\n//         onConnect={onConnect}\n//         nodeTypes={nodeTypes}\n//         // edgeTypes={edgeTypes}\n//         fitView\n//         onDrop={onDrop}\n//         onDragOver={onDragOver}\n//         ref={reactFlowInstance} // Attach the ref here\n//       >\n//         <Background />\n//         <Controls />\n//       </ReactFlow>\n//       <div className=\"sidebar\">\n//         <h3>Drag Nodes</h3>\n//         <div\n//           className=\"drag-node\"\n//           draggable\n//           onDragStart={(event) => event.dataTransfer.setData('application/reactflow', 'inputNode')}\n//         >\n//           Input Node\n//           <InputNode data={{\n//             label: '',\n//             inputText: ''\n//           }} onChange={function (inputText: string): void {\n//             throw new Error('Function not implemented.');\n//           } } />\n//         </div>\n//         <div\n//           className=\"drag-node\"\n//           draggable\n//           onDragStart={(event) => event.dataTransfer.setData('application/reactflow', 'llmNode')}\n//         >\n//           LLM Node\n//         </div>\n//         <div\n//           className=\"drag-node\"\n//           draggable\n//           onDragStart={(event) => event.dataTransfer.setData('application/reactflow', 'outputNode')}\n//         >\n//           Output Node\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default App;\n\n\n\n\n\n// import React, { useState, useCallback } from 'react';\n// import axios from 'axios';\n// import ReactFlow, {\n//   addEdge,\n//   applyEdgeChanges,\n//   applyNodeChanges,\n//   Controls,\n//   Background,\n//   useReactFlow,\n//   NodeChange,\n//   EdgeChange,\n//   Connection,\n//   Edge,\n//   Node,\n//   ReactFlowProvider,\n// } from 'react-flow-renderer';\n// import { InputNode } from './components/InputNode';\n// import { LLMNode } from './components/LLMNode';\n// import { OutputNode } from './components/OutputNode';\n\n// const nodeTypes = {\n//   inputNode: InputNode,\n//   llmNode: LLMNode,\n//   outputNode: OutputNode,\n// };\n\n// const initialNodes: Node[] = [];\n\n// const App = () => {\n//   const [nodes, setNodes] = useState<Node[]>(initialNodes);\n//   const [edges, setEdges] = useState<Edge[]>([]);\n//   const [inputText, setInputText] = useState('');\n//   const [modelConfig, setModelConfig] = useState('');\n\n//   const { project } = useReactFlow();\n\n//   const onNodesChange = useCallback(\n//     (changes: NodeChange[]) => setNodes((nds) => applyNodeChanges(changes, nds)),\n//     []\n//   );\n\n//   const onEdgesChange = useCallback(\n//     (changes: EdgeChange[]) => setEdges((eds) => applyEdgeChanges(changes, eds)),\n//     []\n//   );\n\n//   const onConnect = useCallback(\n//     (params: Connection | Edge) => {\n//       setEdges((eds) => addEdge({ ...params, type: 'custom' }, eds));\n//     },\n//     []\n//   );\n\n//   const onDrop = useCallback(\n//     (event: React.DragEvent) => {\n//       event.preventDefault();\n//       const type = event.dataTransfer.getData('application/reactflow');\n//       const position = project({\n//         x: event.clientX,\n//         y: event.clientY,\n//       });\n\n//       if (type) {\n//         const newNode = {\n//           id: `${nodes.length + 1}`,\n//           type,\n//           position,\n//           data: { label: `${type} Node` },\n//         };\n//         setNodes((nds) => nds.concat(newNode));\n//       }\n//     },\n//     [nodes, project]\n//   );\n\n//   const onDragOver = useCallback((event: React.DragEvent) => {\n//     event.preventDefault();\n//     event.dataTransfer.dropEffect = 'move';\n//   }, []);\n\n//   const handleRunWorkflow = async () => {\n//     const inputNode = nodes.find((node) => node.type === 'inputNode');\n//     const llmNode = nodes.find((node) => node.type === 'llmNode');\n//     const outputNodeIndex = nodes.findIndex((node) => node.type === 'outputNode');\n  \n//     if (!inputNode || !llmNode || outputNodeIndex === -1) {\n//       console.error(\"One or more nodes are not defined.\");\n//       alert(\"Please ensure that all nodes (Input, LLM, Output) are properly connected.\");\n//       return;\n//     }\n  \n//     try {\n//       const response = await axios.post('https://api.openai.com/v1/chat/completions', {\n//         inputText: inputNode.data.inputText,\n//         modelConfig: llmNode.data.modelConfig,\n//       });\n  \n//       const updatedNodes = [...nodes];\n//       updatedNodes[outputNodeIndex].data.output = response.data.result;\n//       setNodes(updatedNodes);\n//     } catch (error: any) {\n//       console.error(\"Error during API call:\", error.response ? error.response.data : error.message);\n//       alert(\"An error occurred while calling the API. Please try again.\");\n//     }\n//   };\n\n//   return (\n//     <ReactFlowProvider>\n//       <div style={{ height: '100vh' }}>\n//         <ReactFlow\n//           nodes={nodes}\n//           edges={edges}\n//           onNodesChange={onNodesChange}\n//           onEdgesChange={onEdgesChange}\n//           onConnect={onConnect}\n//           nodeTypes={nodeTypes}\n//           fitView onDrop={onDrop}\n//           onDragOver={onDragOver}\n//         >\n//           <Background />\n//           <Controls />\n//         </ReactFlow>\n//         <div className=\"sidebar\">\n//           <h3>Drag Nodes</h3>\n//           <div\n//             className=\"drag-node\"\n//             draggable\n//             onDragStart={(event) => event.dataTransfer.setData('application/reactflow', 'inputNode')}\n//           >\n//             Input Node\n//             <InputNode data={{ label: 'Enter your prompt', inputText: '' }} />\n//           </div>\n//           <div\n//             className=\"drag-node\"\n//             draggable\n//             onDragStart={(event) => event.dataTransfer.setData('application/reactflow', 'llmNode')}\n//           >\n//             LLM Node\n//             <LLMNode data={{ label: 'Model Config', modelConfig: '' }} />\n//           </div>\n//           <div\n//             className=\"drag-node\"\n//             draggable\n//             onDragStart={(event) => event.dataTransfer.setData('application/reactflow', 'outputNode')}\n//           >\n//             Output Node\n//           </div>\n//         </div>\n//         <button onClick={handleRunWorkflow} style={{ marginTop: '10px', padding: '10px' }}>\n//           Run Workflow\n//         </button>\n//       </div>\n    \n//     </ReactFlowProvider>\n//   );\n// };\n\n// export default App;"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}