{"ast":null,"code":"var _jsxFileName = \"D:\\\\llm\\\\llm-workflow-ui\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useCallback } from 'react';\n// import axios from 'axios';\n// import ReactFlow, {\n//   addEdge,\n//   applyEdgeChanges,\n//   applyNodeChanges,\n//   Controls,\n//   Background,\n//   NodeChange,\n//   EdgeChange,\n//   Connection,\n//   Edge,\n//   Node,\n// } from 'react-flow-renderer';\n// import { InputNode } from './components/InputNode';\n// import { LLMNode } from \"./components/LLMNode\"\n// import { OutputNode } from './components/OutputNode';\n\n// // Define initial nodes and edges\n// const initialNodes: Node[] = [\n//   {\n//     id: '1',\n//     type: 'inputNode',\n//     position: { x: 250, y: 5 },\n//     data: { label: 'Input Node', inputText: '' },\n//   },\n//   {\n//     id: '2',\n//     type: 'llmNode',\n//     position: { x: 250, y: 100 },\n//     data: { label: 'LLM Node', modelConfig: {} },\n//   },\n//   {\n//     id: '3',\n//     type: 'outputNode',\n//     position: { x: 250, y: 200 },\n//     data: { label: 'Output Node', output: '' },\n//   },\n// ];\n\n// const initialEdges: Edge[] = [];\n\n// const nodeTypes = {\n//   inputNode: InputNode,\n//   llmNode: LLMNode,\n//   outputNode: OutputNode,\n// };\n\n// const App = () => {\n//   const [nodes, setNodes] = useState<Node[]>(initialNodes);\n//   const [edges, setEdges] = useState<Edge[]>(initialEdges);\n\n//   // Handle node changes\n//   const onNodesChange = useCallback(\n//     (changes: NodeChange[]) => setNodes((nds) => applyNodeChanges(changes, nds)),\n//     []\n//   );\n\n//   // Handle edge changes\n//   const onEdgesChange = useCallback(\n//     (changes: EdgeChange[]) => setEdges((eds) => applyEdgeChanges(changes, eds)),\n//     []\n//   );\n\n//   // Handle node connections (Input -> LLM -> Output)\n//   const onConnect = useCallback(\n//     (params: Connection | Edge) => {\n//       const { source, target } = params;\n\n//       // Define valid connection rules\n//       if (\n//         (source === '1' && target === '2') || // Input -> LLM\n//         (source === '2' && target === '3') // LLM -> Output\n//       ) {\n//         setEdges((eds) => addEdge(params, eds));\n//       } else {\n//         alert('Invalid connection! Follow Input -> LLM -> Output flow.');\n//       }\n//     },\n//     []\n//   );\n\n//   // Handle workflow execution\n//   const handleRunWorkflow = async () => {\n//     const inputNode = nodes.find((node) => node.type === 'inputNode');\n//     const llmNode = nodes.find((node) => node.type === 'llmNode');\n//     const outputNodeIndex = nodes.findIndex((node) => node.type === 'outputNode');\n\n//     // Check if the required nodes are found\n//     if (!inputNode || !llmNode || outputNodeIndex === -1) {\n//       console.error(\"One or more nodes are not defined.\");\n//       alert(\"Please ensure that all nodes (Input, LLM, Output) are properly connected.\");\n//       return;\n//     }\n\n//     try {\n//       const response = await axios.post('http://localhost:5000/api/openai', {\n//         inputText: inputNode.data.inputText,\n//         modelConfig: {\n//           model: llmNode.data.modelName,\n//           temperature: llmNode.data.temperature,\n//           maxTokens: llmNode.data.maxTokens,\n//           topP: llmNode.data.topP,\n//           frequencyPenalty: llmNode.data.frequencyPenalty,\n//           presencePenalty: llmNode.data.presencePenalty,\n//         },\n//       }, {\n//         headers: {\n//           'Authorization': `Bearer ${process.env.REACT_APP_OPENAI_API_KEY}`,\n//         },\n//       });\n\n//       const updatedNodes = [...nodes];\n//       updatedNodes[outputNodeIndex].data.output = response.data.result; // Ensure you access the correct structure\n//       setNodes(updatedNodes);\n//     } catch (error: any) {  // Assert the error type to 'any'\n//       console.error(\"Error during API call:\", error.response ? error.response.data : error.message);\n//       alert(\"An error occurred while calling the API. Please try again.\");\n//     }\n//   };\n\n//   return (\n//     <div style={{ height: '100vh' }}>\n//       <ReactFlow\n//         nodes={nodes}\n//         edges={edges}\n//         onNodesChange={onNodesChange}\n//         onEdgesChange={onEdgesChange}\n//         onConnect={onConnect}\n//         nodeTypes={nodeTypes}\n//         fitView\n//       >\n//         <Background />\n//         <Controls />\n//       </ReactFlow>\n//       <button onClick={handleRunWorkflow} style={{ marginTop: '10px', padding: '10px' }}>\n//         Run Workflow\n//       </button>\n//     </div>\n//   );\n// };\n\n// export default App;\n// import React, { useState, useCallback } from 'react';\n// import axios from 'axios';\n// import ReactFlow, {\n//   addEdge,\n//   applyEdgeChanges,\n//   applyNodeChanges,\n//   Controls,\n//   Background,\n//   NodeChange,\n//   EdgeChange,\n//   Connection,\n//   Edge,\n//   Node,\n// } from 'react-flow-renderer';\n// import  InputNode  from \"./components/InputNode\"\n// import  LLMNode  from './components/LLMNode';\n// import { OutputNode } from './components/OutputNode';\n\n// // Define initial nodes and edges\n// const initialNodes: Node[] = [\n//   {\n//     id: '1',\n//     type: 'inputNode',\n//     position: { x: 250, y: 5 },\n//     data: { label: 'Input Node', inputText: '' },\n//   },\n//   {\n//     id: '2',\n//     type: 'llmNode',\n//     position: { x: 250, y: 100 },\n//     data: { label: 'LLM Node', modelConfig: {} },\n//   },\n//   {\n//     id: '3',\n//     type: 'outputNode',\n//     position: { x: 250, y: 200 },\n//     data: { label: 'Output Node', output: '' },\n//   },\n// ];\n\n// const initialEdges: Edge[] = [];\n\n// const nodeTypes = {\n//   inputNode: InputNode,\n//   llmNode: LLMNode,\n//   outputNode: OutputNode,\n// };\n\n// const App = () => {\n//   const [nodes, setNodes] = useState<Node[]>(initialNodes);\n//   const [edges, setEdges] = useState<Edge[]>(initialEdges);\n\n//   // Handle node changes\n//   const onNodesChange = useCallback(\n//     (changes: NodeChange[]) => setNodes((nds) => applyNodeChanges(changes, nds)),\n//     []\n//   );\n\n//   // Handle edge changes\n//   const onEdgesChange = useCallback(\n//     (changes: EdgeChange[]) => setEdges((eds) => applyEdgeChanges(changes, eds)),\n//     []\n//   );\n\n//   // Handle node connections (Input -> LLM -> Output)\n//   const onConnect = useCallback(\n//     (params: Connection | Edge) => {\n//       const { source, target } = params;\n\n//       // Define valid connection rules\n//       if (\n//         (source === '1' && target === '2') || // Input -> LLM\n//         (source === '2' && target === '3') // LLM -> Output\n//       ) {\n//         setEdges((eds) => addEdge(params, eds));\n//       } else {\n//         alert('Invalid connection! Follow Input -> LLM -> Output flow.');\n//       }\n//     },\n//     []\n//   );\n\n//   // Handle workflow execution\n//   const handleRunWorkflow = async () => {\n//     const inputNode = nodes.find((node) => node.type === 'inputNode');\n//     const llmNode = nodes.find((node) => node.type === 'llmNode');\n//     const outputNodeIndex = nodes.findIndex((node) => node.type === 'outputNode');\n\n//     // Check if the required nodes are found\n//     if (!inputNode || !llmNode || outputNodeIndex === -1) {\n//       console.error(\"One or more nodes are not defined.\");\n//       alert(\"Please ensure that all nodes (Input, LLM, Output) are properly connected.\");\n//       return;\n//     }\n\n//     try {\n//       const response = await axios.post('https://api.openai.com/v1/chat/completions', {\n//         inputText: inputNode.data.inputText,\n//         modelConfig: {\n//           model: llmNode.data.modelConfig.modelName,\n//           temperature: llmNode.data.modelConfig.temperature,\n//           maxTokens: llmNode.data.modelConfig.maxTokens,\n//           topP: llmNode.data.modelConfig.topP,\n//           frequencyPenalty: llmNode.data.modelConfig.frequencyPenalty,\n//           presencePenalty: llmNode.data.modelConfig.presencePenalty,\n//         },\n//       }, {\n//         headers: {\n//           'Authorization': `Bearer ${process.env.REACT_APP_OPENAI_API_KEY}`,\n//         },\n//       });\n\n//       const updatedNodes = [...nodes];\n//       updatedNodes[outputNodeIndex].data.output = response.data.result; // Ensure you access the correct structure\n//       setNodes(updatedNodes);\n//       console.log(nodes)\n//     } catch (error: any) {  // Assert the error type to 'any'\n//       console.error(\"Error during API call:\", error.response ? error.response.data : error.message);\n//       alert(\"An error occurred while calling the API. Please try again.\");\n//     }\n//   };\n\n//   return (\n//     <div style={{ height: '100vh' }}>\n//       <ReactFlow\n//         nodes={nodes}\n//         edges={edges}\n//         onNodesChange={onNodesChange}\n//         onEdgesChange={onEdgesChange}\n//         onConnect={onConnect}\n//         nodeTypes={nodeTypes}\n//         fitView\n//       >\n//         <Background />\n//         <Controls />\n//       </ReactFlow>\n//       <button onClick={handleRunWorkflow} style={{ marginTop: '10px', padding: '10px' }}>\n//         Run Workflow\n//       </button>\n//     </div>\n//   );\n// };\n\n// export default App;\n\n// App.tsx\n// App.tsx\n// import React, { useState, useCallback, useRef } from 'react';\n// import ReactFlow, {\n//   addEdge,\n//   applyEdgeChanges,\n//   applyNodeChanges,\n//   Controls,\n//   Background,\n//   NodeChange,\n//   EdgeChange,\n//   Connection,\n//   Edge,\n//   Node,\n//   ReactFlowProvider,\n// } from 'react-flow-renderer';\n// import { InputNode } from './components/InputNode';\n// import { LLMNode } from './components/LLMNode';\n// import { OutputNode } from './components/OutputNode';\n//  // Import your custom edge if needed\n\n// const nodeTypes = {\n//   inputNode: InputNode,\n//   llmNode: LLMNode,\n//   outputNode: OutputNode,\n// };\n\n// // const edgeTypes = {\n// //   custom: CustomEdge, \n//   // Use your custom edge if needed\n// // };\n\n// const initialNodes: Node[] = [];\n\n// const App = () => {\n//   const [nodes, setNodes] = useState<Node[]>(initialNodes);\n//   const [edges, setEdges] = useState<Edge[]>([]);\n\n//   // Create a ref for the ReactFlow instance\n//   const reactFlowInstance = useRef<any>(null);\n\n//   // Handle node changes\n//   const onNodesChange = useCallback(\n//     (changes: NodeChange[]) => setNodes((nds) => applyNodeChanges(changes, nds)),\n//     []\n//   );\n\n//   // Handle edge changes\n//   const onEdgesChange = useCallback(\n//     (changes: EdgeChange[]) => setEdges((eds) => applyEdgeChanges(changes, eds)),\n//     []\n//   );\n\n//   // Handle connections\n//   const onConnect = useCallback(\n//     (params: Connection | Edge) => {\n//       setEdges((eds) => addEdge({ ...params, type: 'custom' }, eds));\n//     },\n//     []\n//   );\n\n//   // Drag-and-drop functionality\n//   const onDrop = useCallback(\n//     (event: React.DragEvent) => {\n//       event.preventDefault();\n//       const type = event.dataTransfer.getData('application/reactflow');\n//       const position = reactFlowInstance.current.project({\n//         x: event.clientX,\n//         y: event.clientY,\n//       });\n\n//       if (type) {\n//         const newNode = {\n//           id: `${nodes.length + 1}`,\n//           type,\n//           position,\n//           data: { label: `${type} Node` }, // Customize this according to your node types\n//         };\n//         setNodes((nds) => nds.concat(newNode));\n//       }\n//     },\n//     [nodes]\n//   );\n\n//   const onDragOver = useCallback((event: React.DragEvent) => {\n//     event.preventDefault();\n//     event.dataTransfer.dropEffect = 'move';\n//   }, []);\n\n//   return (\n//     <div style={{ height: '100vh' }}>\n//       <ReactFlow\n//         nodes={nodes}\n//         edges={edges}\n//         onNodesChange={onNodesChange}\n//         onEdgesChange={onEdgesChange}\n//         onConnect={onConnect}\n//         nodeTypes={nodeTypes}\n//         // edgeTypes={edgeTypes}\n//         fitView\n//         onDrop={onDrop}\n//         onDragOver={onDragOver}\n//         ref={reactFlowInstance} // Attach the ref here\n//       >\n//         <Background />\n//         <Controls />\n//       </ReactFlow>\n//       <div className=\"sidebar\">\n//         <h3>Drag Nodes</h3>\n//         <div\n//           className=\"drag-node\"\n//           draggable\n//           onDragStart={(event) => event.dataTransfer.setData('application/reactflow', 'inputNode')}\n//         >\n//           Input Node\n//           <InputNode data={{\n//             label: '',\n//             inputText: ''\n//           }} onChange={function (inputText: string): void {\n//             throw new Error('Function not implemented.');\n//           } } />\n//         </div>\n//         <div\n//           className=\"drag-node\"\n//           draggable\n//           onDragStart={(event) => event.dataTransfer.setData('application/reactflow', 'llmNode')}\n//         >\n//           LLM Node\n//         </div>\n//         <div\n//           className=\"drag-node\"\n//           draggable\n//           onDragStart={(event) => event.dataTransfer.setData('application/reactflow', 'outputNode')}\n//         >\n//           Output Node\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default App;\n\nimport React, { useState, useCallback, useRef } from 'react';\nimport axios from 'axios';\nimport ReactFlow, { addEdge, applyEdgeChanges, applyNodeChanges, Controls, Background } from 'react-flow-renderer';\nimport { InputNode } from './components/InputNode';\nimport { LLMNode } from './components/LLMNode';\nimport { OutputNode } from './components/OutputNode';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst nodeTypes = {\n  inputNode: InputNode,\n  llmNode: LLMNode,\n  outputNode: OutputNode\n};\nconst initialNodes = [];\nconst App = () => {\n  _s();\n  const [nodes, setNodes] = useState(initialNodes);\n  const [edges, setEdges] = useState([]);\n  const [inputText, setInputText] = useState('');\n  const [modelConfig, setModelConfig] = useState('');\n  const reactFlowInstance = useRef(null);\n  const onNodesChange = useCallback(changes => setNodes(nds => applyNodeChanges(changes, nds)), []);\n  const onEdgesChange = useCallback(changes => setEdges(eds => applyEdgeChanges(changes, eds)), []);\n  const onConnect = useCallback(params => {\n    setEdges(eds => addEdge({\n      ...params,\n      type: 'custom'\n    }, eds));\n  }, []);\n  const onDrop = useCallback(event => {\n    event.preventDefault();\n    const type = event.dataTransfer.getData('application/reactflow');\n    const position = reactFlowInstance.current.project({\n      x: event.clientX,\n      y: event.clientY\n    });\n    if (type) {\n      const newNode = {\n        id: `${nodes.length + 1}`,\n        type,\n        position,\n        data: {\n          label: `${type} Node`\n        }\n      };\n      setNodes(nds => nds.concat(newNode));\n    }\n  }, [nodes]);\n  const onDragOver = useCallback(event => {\n    event.preventDefault();\n    event.dataTransfer.dropEffect = 'move';\n  }, []);\n  const handleRunWorkflow = async () => {\n    const inputNode = nodes.find(node => node.type === 'inputNode');\n    const llmNode = nodes.find(node => node.type === 'llmNode');\n    const outputNodeIndex = nodes.findIndex(node => node.type === 'outputNode');\n    if (!inputNode || !llmNode || outputNodeIndex === -1) {\n      console.error(\"One or more nodes are not defined.\");\n      alert(\"Please ensure that all nodes (Input, LLM, Output) are properly connected.\");\n      return;\n    }\n    try {\n      const response = await axios.post('https://api.openai.com/v1/chat/completions', {\n        inputText: inputNode.data.inputText,\n        modelConfig: llmNode.data.modelConfig\n      });\n      const updatedNodes = [...nodes];\n      updatedNodes[outputNodeIndex].data.output = response.data.result;\n      setNodes(updatedNodes);\n    } catch (error) {\n      console.error(\"Error during API call:\", error.response ? error.response.data : error.message);\n      alert(\"An error occurred while calling the API. Please try again.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: '100vh'\n    },\n    children: [/*#__PURE__*/_jsxDEV(ReactFlow, {\n      nodes: nodes,\n      edges: edges,\n      onNodesChange: onNodesChange,\n      onEdgesChange: onEdgesChange,\n      onConnect: onConnect,\n      nodeTypes: nodeTypes,\n      fitView: true,\n      onDrop: onDrop,\n      onDragOver: onDragOver,\n      ref: reactFlowInstance,\n      children: [/*#__PURE__*/_jsxDEV(Background, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 559,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 560,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 547,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebar\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Drag Nodes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 563,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"drag-node\",\n        draggable: true,\n        onDragStart: event => event.dataTransfer.setData('application/reactflow', 'inputNode'),\n        children: [\"Input Node\", /*#__PURE__*/_jsxDEV(InputNode, {\n          data: {\n            label: 'Enter your prompt',\n            inputText: ''\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 570,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 564,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"drag-node\",\n        draggable: true,\n        onDragStart: event => event.dataTransfer.setData('application/reactflow', 'llmNode'),\n        children: [\"LLM Node\", /*#__PURE__*/_jsxDEV(LLMNode, {\n          data: {\n            label: 'Model Config',\n            modelConfig: ''\n          },\n          onChange: modelConfig => setModelConfig(modelConfig)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 578,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 572,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"drag-node\",\n        draggable: true,\n        onDragStart: event => event.dataTransfer.setData('application/reactflow', 'outputNode'),\n        children: \"Output Node\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 580,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 562,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleRunWorkflow,\n      style: {\n        marginTop: '10px',\n        padding: '10px'\n      },\n      children: \"Run Workflow\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 588,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 546,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"6uuSMO6E6nugaCmyC0PFR2vG7X8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useCallback","useRef","axios","ReactFlow","addEdge","applyEdgeChanges","applyNodeChanges","Controls","Background","InputNode","LLMNode","OutputNode","jsxDEV","_jsxDEV","nodeTypes","inputNode","llmNode","outputNode","initialNodes","App","_s","nodes","setNodes","edges","setEdges","inputText","setInputText","modelConfig","setModelConfig","reactFlowInstance","onNodesChange","changes","nds","onEdgesChange","eds","onConnect","params","type","onDrop","event","preventDefault","dataTransfer","getData","position","current","project","x","clientX","y","clientY","newNode","id","length","data","label","concat","onDragOver","dropEffect","handleRunWorkflow","find","node","outputNodeIndex","findIndex","console","error","alert","response","post","updatedNodes","output","result","message","style","height","children","fitView","ref","fileName","_jsxFileName","lineNumber","columnNumber","className","draggable","onDragStart","setData","onChange","onClick","marginTop","padding","_c","$RefreshReg$"],"sources":["D:/llm/llm-workflow-ui/src/App.tsx"],"sourcesContent":["// import React, { useState, useCallback } from 'react';\n// import axios from 'axios';\n// import ReactFlow, {\n//   addEdge,\n//   applyEdgeChanges,\n//   applyNodeChanges,\n//   Controls,\n//   Background,\n//   NodeChange,\n//   EdgeChange,\n//   Connection,\n//   Edge,\n//   Node,\n// } from 'react-flow-renderer';\n// import { InputNode } from './components/InputNode';\n// import { LLMNode } from \"./components/LLMNode\"\n// import { OutputNode } from './components/OutputNode';\n\n// // Define initial nodes and edges\n// const initialNodes: Node[] = [\n//   {\n//     id: '1',\n//     type: 'inputNode',\n//     position: { x: 250, y: 5 },\n//     data: { label: 'Input Node', inputText: '' },\n//   },\n//   {\n//     id: '2',\n//     type: 'llmNode',\n//     position: { x: 250, y: 100 },\n//     data: { label: 'LLM Node', modelConfig: {} },\n//   },\n//   {\n//     id: '3',\n//     type: 'outputNode',\n//     position: { x: 250, y: 200 },\n//     data: { label: 'Output Node', output: '' },\n//   },\n// ];\n\n// const initialEdges: Edge[] = [];\n\n// const nodeTypes = {\n//   inputNode: InputNode,\n//   llmNode: LLMNode,\n//   outputNode: OutputNode,\n// };\n\n// const App = () => {\n//   const [nodes, setNodes] = useState<Node[]>(initialNodes);\n//   const [edges, setEdges] = useState<Edge[]>(initialEdges);\n\n//   // Handle node changes\n//   const onNodesChange = useCallback(\n//     (changes: NodeChange[]) => setNodes((nds) => applyNodeChanges(changes, nds)),\n//     []\n//   );\n\n//   // Handle edge changes\n//   const onEdgesChange = useCallback(\n//     (changes: EdgeChange[]) => setEdges((eds) => applyEdgeChanges(changes, eds)),\n//     []\n//   );\n\n//   // Handle node connections (Input -> LLM -> Output)\n//   const onConnect = useCallback(\n//     (params: Connection | Edge) => {\n//       const { source, target } = params;\n\n//       // Define valid connection rules\n//       if (\n//         (source === '1' && target === '2') || // Input -> LLM\n//         (source === '2' && target === '3') // LLM -> Output\n//       ) {\n//         setEdges((eds) => addEdge(params, eds));\n//       } else {\n//         alert('Invalid connection! Follow Input -> LLM -> Output flow.');\n//       }\n//     },\n//     []\n//   );\n\n//   // Handle workflow execution\n//   const handleRunWorkflow = async () => {\n//     const inputNode = nodes.find((node) => node.type === 'inputNode');\n//     const llmNode = nodes.find((node) => node.type === 'llmNode');\n//     const outputNodeIndex = nodes.findIndex((node) => node.type === 'outputNode');\n  \n//     // Check if the required nodes are found\n//     if (!inputNode || !llmNode || outputNodeIndex === -1) {\n//       console.error(\"One or more nodes are not defined.\");\n//       alert(\"Please ensure that all nodes (Input, LLM, Output) are properly connected.\");\n//       return;\n//     }\n  \n//     try {\n//       const response = await axios.post('http://localhost:5000/api/openai', {\n//         inputText: inputNode.data.inputText,\n//         modelConfig: {\n//           model: llmNode.data.modelName,\n//           temperature: llmNode.data.temperature,\n//           maxTokens: llmNode.data.maxTokens,\n//           topP: llmNode.data.topP,\n//           frequencyPenalty: llmNode.data.frequencyPenalty,\n//           presencePenalty: llmNode.data.presencePenalty,\n//         },\n//       }, {\n//         headers: {\n//           'Authorization': `Bearer ${process.env.REACT_APP_OPENAI_API_KEY}`,\n//         },\n//       });\n  \n//       const updatedNodes = [...nodes];\n//       updatedNodes[outputNodeIndex].data.output = response.data.result; // Ensure you access the correct structure\n//       setNodes(updatedNodes);\n//     } catch (error: any) {  // Assert the error type to 'any'\n//       console.error(\"Error during API call:\", error.response ? error.response.data : error.message);\n//       alert(\"An error occurred while calling the API. Please try again.\");\n//     }\n//   };\n  \n\n//   return (\n//     <div style={{ height: '100vh' }}>\n//       <ReactFlow\n//         nodes={nodes}\n//         edges={edges}\n//         onNodesChange={onNodesChange}\n//         onEdgesChange={onEdgesChange}\n//         onConnect={onConnect}\n//         nodeTypes={nodeTypes}\n//         fitView\n//       >\n//         <Background />\n//         <Controls />\n//       </ReactFlow>\n//       <button onClick={handleRunWorkflow} style={{ marginTop: '10px', padding: '10px' }}>\n//         Run Workflow\n//       </button>\n//     </div>\n//   );\n// };\n\n// export default App;\n// import React, { useState, useCallback } from 'react';\n// import axios from 'axios';\n// import ReactFlow, {\n//   addEdge,\n//   applyEdgeChanges,\n//   applyNodeChanges,\n//   Controls,\n//   Background,\n//   NodeChange,\n//   EdgeChange,\n//   Connection,\n//   Edge,\n//   Node,\n// } from 'react-flow-renderer';\n// import  InputNode  from \"./components/InputNode\"\n// import  LLMNode  from './components/LLMNode';\n// import { OutputNode } from './components/OutputNode';\n\n// // Define initial nodes and edges\n// const initialNodes: Node[] = [\n//   {\n//     id: '1',\n//     type: 'inputNode',\n//     position: { x: 250, y: 5 },\n//     data: { label: 'Input Node', inputText: '' },\n//   },\n//   {\n//     id: '2',\n//     type: 'llmNode',\n//     position: { x: 250, y: 100 },\n//     data: { label: 'LLM Node', modelConfig: {} },\n//   },\n//   {\n//     id: '3',\n//     type: 'outputNode',\n//     position: { x: 250, y: 200 },\n//     data: { label: 'Output Node', output: '' },\n//   },\n// ];\n\n// const initialEdges: Edge[] = [];\n\n// const nodeTypes = {\n//   inputNode: InputNode,\n//   llmNode: LLMNode,\n//   outputNode: OutputNode,\n// };\n\n// const App = () => {\n//   const [nodes, setNodes] = useState<Node[]>(initialNodes);\n//   const [edges, setEdges] = useState<Edge[]>(initialEdges);\n\n//   // Handle node changes\n//   const onNodesChange = useCallback(\n//     (changes: NodeChange[]) => setNodes((nds) => applyNodeChanges(changes, nds)),\n//     []\n//   );\n\n//   // Handle edge changes\n//   const onEdgesChange = useCallback(\n//     (changes: EdgeChange[]) => setEdges((eds) => applyEdgeChanges(changes, eds)),\n//     []\n//   );\n\n//   // Handle node connections (Input -> LLM -> Output)\n//   const onConnect = useCallback(\n//     (params: Connection | Edge) => {\n//       const { source, target } = params;\n\n//       // Define valid connection rules\n//       if (\n//         (source === '1' && target === '2') || // Input -> LLM\n//         (source === '2' && target === '3') // LLM -> Output\n//       ) {\n//         setEdges((eds) => addEdge(params, eds));\n//       } else {\n//         alert('Invalid connection! Follow Input -> LLM -> Output flow.');\n//       }\n//     },\n//     []\n//   );\n\n//   // Handle workflow execution\n//   const handleRunWorkflow = async () => {\n//     const inputNode = nodes.find((node) => node.type === 'inputNode');\n//     const llmNode = nodes.find((node) => node.type === 'llmNode');\n//     const outputNodeIndex = nodes.findIndex((node) => node.type === 'outputNode');\n\n//     // Check if the required nodes are found\n//     if (!inputNode || !llmNode || outputNodeIndex === -1) {\n//       console.error(\"One or more nodes are not defined.\");\n//       alert(\"Please ensure that all nodes (Input, LLM, Output) are properly connected.\");\n//       return;\n//     }\n\n//     try {\n//       const response = await axios.post('https://api.openai.com/v1/chat/completions', {\n//         inputText: inputNode.data.inputText,\n//         modelConfig: {\n//           model: llmNode.data.modelConfig.modelName,\n//           temperature: llmNode.data.modelConfig.temperature,\n//           maxTokens: llmNode.data.modelConfig.maxTokens,\n//           topP: llmNode.data.modelConfig.topP,\n//           frequencyPenalty: llmNode.data.modelConfig.frequencyPenalty,\n//           presencePenalty: llmNode.data.modelConfig.presencePenalty,\n//         },\n//       }, {\n//         headers: {\n//           'Authorization': `Bearer ${process.env.REACT_APP_OPENAI_API_KEY}`,\n//         },\n//       });\n\n//       const updatedNodes = [...nodes];\n//       updatedNodes[outputNodeIndex].data.output = response.data.result; // Ensure you access the correct structure\n//       setNodes(updatedNodes);\n//       console.log(nodes)\n//     } catch (error: any) {  // Assert the error type to 'any'\n//       console.error(\"Error during API call:\", error.response ? error.response.data : error.message);\n//       alert(\"An error occurred while calling the API. Please try again.\");\n//     }\n//   };\n\n//   return (\n//     <div style={{ height: '100vh' }}>\n//       <ReactFlow\n//         nodes={nodes}\n//         edges={edges}\n//         onNodesChange={onNodesChange}\n//         onEdgesChange={onEdgesChange}\n//         onConnect={onConnect}\n//         nodeTypes={nodeTypes}\n//         fitView\n//       >\n//         <Background />\n//         <Controls />\n//       </ReactFlow>\n//       <button onClick={handleRunWorkflow} style={{ marginTop: '10px', padding: '10px' }}>\n//         Run Workflow\n//       </button>\n//     </div>\n//   );\n// };\n\n// export default App;\n\n\n\n\n\n// App.tsx\n// App.tsx\n// import React, { useState, useCallback, useRef } from 'react';\n// import ReactFlow, {\n//   addEdge,\n//   applyEdgeChanges,\n//   applyNodeChanges,\n//   Controls,\n//   Background,\n//   NodeChange,\n//   EdgeChange,\n//   Connection,\n//   Edge,\n//   Node,\n//   ReactFlowProvider,\n// } from 'react-flow-renderer';\n// import { InputNode } from './components/InputNode';\n// import { LLMNode } from './components/LLMNode';\n// import { OutputNode } from './components/OutputNode';\n//  // Import your custom edge if needed\n\n// const nodeTypes = {\n//   inputNode: InputNode,\n//   llmNode: LLMNode,\n//   outputNode: OutputNode,\n// };\n\n// // const edgeTypes = {\n// //   custom: CustomEdge, \n//   // Use your custom edge if needed\n// // };\n\n// const initialNodes: Node[] = [];\n\n// const App = () => {\n//   const [nodes, setNodes] = useState<Node[]>(initialNodes);\n//   const [edges, setEdges] = useState<Edge[]>([]);\n  \n//   // Create a ref for the ReactFlow instance\n//   const reactFlowInstance = useRef<any>(null);\n\n//   // Handle node changes\n//   const onNodesChange = useCallback(\n//     (changes: NodeChange[]) => setNodes((nds) => applyNodeChanges(changes, nds)),\n//     []\n//   );\n\n//   // Handle edge changes\n//   const onEdgesChange = useCallback(\n//     (changes: EdgeChange[]) => setEdges((eds) => applyEdgeChanges(changes, eds)),\n//     []\n//   );\n\n//   // Handle connections\n//   const onConnect = useCallback(\n//     (params: Connection | Edge) => {\n//       setEdges((eds) => addEdge({ ...params, type: 'custom' }, eds));\n//     },\n//     []\n//   );\n\n//   // Drag-and-drop functionality\n//   const onDrop = useCallback(\n//     (event: React.DragEvent) => {\n//       event.preventDefault();\n//       const type = event.dataTransfer.getData('application/reactflow');\n//       const position = reactFlowInstance.current.project({\n//         x: event.clientX,\n//         y: event.clientY,\n//       });\n\n//       if (type) {\n//         const newNode = {\n//           id: `${nodes.length + 1}`,\n//           type,\n//           position,\n//           data: { label: `${type} Node` }, // Customize this according to your node types\n//         };\n//         setNodes((nds) => nds.concat(newNode));\n//       }\n//     },\n//     [nodes]\n//   );\n\n//   const onDragOver = useCallback((event: React.DragEvent) => {\n//     event.preventDefault();\n//     event.dataTransfer.dropEffect = 'move';\n//   }, []);\n\n//   return (\n//     <div style={{ height: '100vh' }}>\n//       <ReactFlow\n//         nodes={nodes}\n//         edges={edges}\n//         onNodesChange={onNodesChange}\n//         onEdgesChange={onEdgesChange}\n//         onConnect={onConnect}\n//         nodeTypes={nodeTypes}\n//         // edgeTypes={edgeTypes}\n//         fitView\n//         onDrop={onDrop}\n//         onDragOver={onDragOver}\n//         ref={reactFlowInstance} // Attach the ref here\n//       >\n//         <Background />\n//         <Controls />\n//       </ReactFlow>\n//       <div className=\"sidebar\">\n//         <h3>Drag Nodes</h3>\n//         <div\n//           className=\"drag-node\"\n//           draggable\n//           onDragStart={(event) => event.dataTransfer.setData('application/reactflow', 'inputNode')}\n//         >\n//           Input Node\n//           <InputNode data={{\n//             label: '',\n//             inputText: ''\n//           }} onChange={function (inputText: string): void {\n//             throw new Error('Function not implemented.');\n//           } } />\n//         </div>\n//         <div\n//           className=\"drag-node\"\n//           draggable\n//           onDragStart={(event) => event.dataTransfer.setData('application/reactflow', 'llmNode')}\n//         >\n//           LLM Node\n//         </div>\n//         <div\n//           className=\"drag-node\"\n//           draggable\n//           onDragStart={(event) => event.dataTransfer.setData('application/reactflow', 'outputNode')}\n//         >\n//           Output Node\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default App;\n\n\n\n\n\nimport React, { useState, useCallback, useRef } from 'react';\nimport axios from 'axios';\nimport ReactFlow, {\n  addEdge,\n  applyEdgeChanges,\n  applyNodeChanges,\n  Controls,\n  Background,\n  NodeChange,\n  EdgeChange,\n  Connection,\n  Edge,\n  Node,\n  ReactFlowProvider,\n} from 'react-flow-renderer';\nimport { InputNode } from './components/InputNode';\nimport { LLMNode } from './components/LLMNode';\nimport { OutputNode } from './components/OutputNode';\n\nconst nodeTypes = {\n  inputNode: InputNode,\n  llmNode: LLMNode,\n  outputNode: OutputNode,\n};\n\nconst initialNodes: Node[] = [];\n\nconst App = () => {\n  const [nodes, setNodes] = useState<Node[]>(initialNodes);\n  const [edges, setEdges] = useState<Edge[]>([]);\n  const [inputText, setInputText] = useState('');\n  const [modelConfig, setModelConfig] = useState('');\n\n  const reactFlowInstance = useRef<any>(null);\n\n  const onNodesChange = useCallback(\n    (changes: NodeChange[]) => setNodes((nds) => applyNodeChanges(changes, nds)),\n    []\n  );\n\n  const onEdgesChange = useCallback(\n    (changes: EdgeChange[]) => setEdges((eds) => applyEdgeChanges(changes, eds)),\n    []\n  );\n\n  const onConnect = useCallback(\n    (params: Connection | Edge) => {\n      setEdges((eds) => addEdge({ ...params, type: 'custom' }, eds));\n    },\n    []\n  );\n\n  const onDrop = useCallback(\n    (event: React.DragEvent) => {\n      event.preventDefault();\n      const type = event.dataTransfer.getData('application/reactflow');\n      const position = reactFlowInstance.current.project({\n        x: event.clientX,\n        y: event.clientY ,\n      });\n\n      if (type) {\n        const newNode = {\n          id: `${nodes.length + 1}`,\n          type,\n          position,\n          data: { label: `${type} Node` },\n        };\n        setNodes((nds) => nds.concat(newNode));\n      }\n    },\n    [nodes]\n  );\n\n  const onDragOver = useCallback((event: React.DragEvent) => {\n    event.preventDefault();\n    event.dataTransfer.dropEffect = 'move';\n  }, []);\n\n  const handleRunWorkflow = async () => {\n    const inputNode = nodes.find((node) => node.type === 'inputNode');\n    const llmNode = nodes.find((node) => node.type === 'llmNode');\n    const outputNodeIndex = nodes.findIndex((node) => node.type === 'outputNode');\n  \n    if (!inputNode || !llmNode || outputNodeIndex === -1) {\n      console.error(\"One or more nodes are not defined.\");\n      alert(\"Please ensure that all nodes (Input, LLM, Output) are properly connected.\");\n      return;\n    }\n  \n    try {\n      const response = await axios.post('https://api.openai.com/v1/chat/completions', {\n        inputText: inputNode.data.inputText,\n        modelConfig: llmNode.data.modelConfig,\n      });\n  \n      const updatedNodes = [...nodes];\n      updatedNodes[outputNodeIndex].data.output = response.data.result;\n      setNodes(updatedNodes);\n    } catch (error: any) {\n      console.error(\"Error during API call:\", error.response ? error.response.data : error.message);\n      alert(\"An error occurred while calling the API. Please try again.\");\n    }\n  };\n  return (\n    <div style={{ height: '100vh' }}>\n      <ReactFlow\n        nodes={nodes}\n        edges={edges}\n        onNodesChange={onNodesChange}\n        onEdgesChange={onEdgesChange}\n        onConnect={onConnect}\n        nodeTypes={nodeTypes}\n        fitView\n        onDrop={onDrop}\n        onDragOver={onDragOver}\n        ref={reactFlowInstance}\n      >\n        <Background />\n        <Controls />\n      </ReactFlow>\n      <div className=\"sidebar\">\n        <h3>Drag Nodes</h3>\n        <div\n          className=\"drag-node\"\n          draggable\n          onDragStart={(event) => event.dataTransfer.setData('application/reactflow', 'inputNode')}\n        >\n          Input Node\n          <InputNode data={{ label: 'Enter your prompt', inputText: '' }} />\n        </div>\n        <div\n          className=\"drag-node\"\n          draggable\n          onDragStart={(event) => event.dataTransfer.setData('application/reactflow', 'llmNode')}\n        >\n          LLM Node\n          <LLMNode data={{ label: 'Model Config', modelConfig: '' }} onChange={(modelConfig) => setModelConfig(modelConfig)} />\n        </div>\n        <div\n          className=\"drag-node\"\n          draggable\n          onDragStart={(event) => event.dataTransfer.setData('application/reactflow', 'outputNode')}\n        >\n          Output Node\n        </div>\n      </div>\n      <button onClick={handleRunWorkflow} style={{ marginTop: '10px', padding: '10px' }}>\n        Run Workflow\n      </button>\n    </div>\n  );\n};\n\nexport default App;"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAMA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,WAAW,EAAEC,MAAM,QAAQ,OAAO;AAC5D,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,IACdC,OAAO,EACPC,gBAAgB,EAChBC,gBAAgB,EAChBC,QAAQ,EACRC,UAAU,QAOL,qBAAqB;AAC5B,SAASC,SAAS,QAAQ,wBAAwB;AAClD,SAASC,OAAO,QAAQ,sBAAsB;AAC9C,SAASC,UAAU,QAAQ,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErD,MAAMC,SAAS,GAAG;EAChBC,SAAS,EAAEN,SAAS;EACpBO,OAAO,EAAEN,OAAO;EAChBO,UAAU,EAAEN;AACd,CAAC;AAED,MAAMO,YAAoB,GAAG,EAAE;AA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}