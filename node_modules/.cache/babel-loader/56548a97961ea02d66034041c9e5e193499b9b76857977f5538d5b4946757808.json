{"ast":null,"code":"// import React, { useState } from 'react';\n\n// // Define the type for props\n// interface LLMNodeProps {\n//   data: {\n//     label: string; // Define the structure of the data prop here\n//     modelConfig?: any; // You can specify a more precise type here if known\n//   };\n// }\n\n// export const LLMNode: React.FC<LLMNodeProps> = ({ data }) => {\n//   const [modelConfig, setModelConfig] = useState('');\n\n//   const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n//     setModelConfig(e.target.value);\n//   };\n\n//   return (\n//     <div style={{ padding: '10px', background: '#CAF0F8', border: '1px solid #0077B6', borderRadius: '5px' }}>\n//       <strong>{data.label}</strong>\n//       <div>\n//         <input\n//           type=\"text\"\n//           value={modelConfig}\n//           onChange={handleChange}\n//           placeholder=\"Model Config\"\n//         />\n//       </div>\n//     </div>\n//   );\n// };\n\n// import React, { useState } from 'react';\n\n// const LLMNode = () => {\n//     // Initialize state\n//     const [data, setData] = useState({\n//         modelConfig: {},\n//         setModelConfig: (newConfig: any) => setData(prev => ({ ...prev, modelConfig: newConfig })),\n//     });\n\n//     // Handle input change\n//     const handleChange = (event: { target: { value: any; }; }) => {\n//         const { value } = event.target;\n//         console.log(data); // Log to verify structure\n//         if (typeof data.setModelConfig === 'function') {\n//             data.setModelConfig({ ...data.modelConfig, someKey: value }); // Update modelConfig accordingly\n//         } else {\n//             console.error('setModelConfig is not defined in data');\n//         }\n//     };\n\n//     return (\n//         <div>\n//             <input type=\"text\" onChange={handleChange} />\n//         </div>\n//     );\n// };\n\n// export default LLMNode;","map":{"version":3,"names":[],"sources":["D:/llm/llm-workflow-ui/src/components/LLMNode.tsx"],"sourcesContent":["// import React, { useState } from 'react';\r\n\r\n// // Define the type for props\r\n// interface LLMNodeProps {\r\n//   data: {\r\n//     label: string; // Define the structure of the data prop here\r\n//     modelConfig?: any; // You can specify a more precise type here if known\r\n//   };\r\n// }\r\n\r\n// export const LLMNode: React.FC<LLMNodeProps> = ({ data }) => {\r\n//   const [modelConfig, setModelConfig] = useState('');\r\n\r\n//   const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n//     setModelConfig(e.target.value);\r\n//   };\r\n\r\n//   return (\r\n//     <div style={{ padding: '10px', background: '#CAF0F8', border: '1px solid #0077B6', borderRadius: '5px' }}>\r\n//       <strong>{data.label}</strong>\r\n//       <div>\r\n//         <input\r\n//           type=\"text\"\r\n//           value={modelConfig}\r\n//           onChange={handleChange}\r\n//           placeholder=\"Model Config\"\r\n//         />\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// import React, { useState } from 'react';\r\n\r\n// const LLMNode = () => {\r\n//     // Initialize state\r\n//     const [data, setData] = useState({\r\n//         modelConfig: {},\r\n//         setModelConfig: (newConfig: any) => setData(prev => ({ ...prev, modelConfig: newConfig })),\r\n//     });\r\n\r\n//     // Handle input change\r\n//     const handleChange = (event: { target: { value: any; }; }) => {\r\n//         const { value } = event.target;\r\n//         console.log(data); // Log to verify structure\r\n//         if (typeof data.setModelConfig === 'function') {\r\n//             data.setModelConfig({ ...data.modelConfig, someKey: value }); // Update modelConfig accordingly\r\n//         } else {\r\n//             console.error('setModelConfig is not defined in data');\r\n//         }\r\n//     };\r\n\r\n//     return (\r\n//         <div>\r\n//             <input type=\"text\" onChange={handleChange} />\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default LLMNode;\r\n"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}