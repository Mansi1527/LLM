{"ast":null,"code":"import{useState,useCallback}from'react';import axios from'axios';import ReactFlow,{addEdge,applyEdgeChanges,applyNodeChanges,Controls,Background}from'react-flow-renderer';import{InputNode}from'./components/InputNode';import{LLMNode}from'./components/LLMNode';import{OutputNode}from'./components/OutputNode';// Define initial nodes and edges\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const initialNodes=[{id:'1',type:'inputNode',position:{x:250,y:5},data:{label:'Input Node',inputText:''}},{id:'2',type:'llmNode',position:{x:250,y:100},data:{label:'LLM Node',modelConfig:{}}},{id:'3',type:'outputNode',position:{x:250,y:200},data:{label:'Output Node',output:''}}];const initialEdges=[];const nodeTypes={inputNode:InputNode,llmNode:LLMNode,outputNode:OutputNode};const App=()=>{const[nodes,setNodes]=useState(initialNodes);const[edges,setEdges]=useState(initialEdges);// Handle node changes\nconst onNodesChange=useCallback(changes=>setNodes(nds=>applyNodeChanges(changes,nds)),[]);// Handle edge changes\nconst onEdgesChange=useCallback(changes=>setEdges(eds=>applyEdgeChanges(changes,eds)),[]);// Handle node connections (Input -> LLM -> Output)\nconst onConnect=useCallback(params=>{const{source,target}=params;// Define valid connection rules\nif(source==='1'&&target==='2'||// Input -> LLM\nsource==='2'&&target==='3'// LLM -> Output\n){setEdges(eds=>addEdge(params,eds));}else{alert('Invalid connection! Follow Input -> LLM -> Output flow.');}},[]);// Handle workflow execution\nconst handleRunWorkflow=async()=>{const inputNode=nodes.find(node=>node.type==='inputNode');const llmNode=nodes.find(node=>node.type==='llmNode');const outputNodeIndex=nodes.findIndex(node=>node.type==='outputNode');// Check if the required nodes are found\nif(!inputNode||!llmNode||outputNodeIndex===-1){console.error('One or more nodes are not defined.');alert('Please ensure that all nodes (Input, LLM, Output) are properly connected.');return;}try{const response=await axios.post('https://api.openai.com/v1/chat/completions',{inputText:inputNode.data.inputText,modelConfig:{model:llmNode.data.modelName,temperature:llmNode.data.temperature,maxTokens:llmNode.data.maxTokens,topP:llmNode.data.topP,frequencyPenalty:llmNode.data.frequencyPenalty,presencePenalty:llmNode.data.presencePenalty}},{headers:{Authorization:`Bearer ${process.env.REACT_APP_OPENAI_API_KEY}`}});const updatedNodes=[...nodes];updatedNodes[outputNodeIndex].data.output=response.data.choices[0].message.content;// Updated result handling\nsetNodes(updatedNodes);}catch(error){console.error('Error during API call:',error.response?error.response.data:error.message);alert('An error occurred while calling the API. Please try again.');}};return/*#__PURE__*/_jsx(\"div\",{style:{height:'100vh'},children:/*#__PURE__*/_jsxs(ReactFlow,{nodes:nodes,edges:edges,onNodesChange:onNodesChange,onEdgesChange:onEdgesChange,onConnect:onConnect,nodeTypes:nodeTypes,fitView:true,children:[/*#__PURE__*/_jsx(Background,{}),/*#__PURE__*/_jsx(Controls,{}),/*#__PURE__*/_jsx(\"button\",{onClick:handleRunWorkflow,style:{marginTop:'10px',padding:'10px'},children:\"Run Workflow\"})]})});};export default App;","map":{"version":3,"names":["useState","useCallback","axios","ReactFlow","addEdge","applyEdgeChanges","applyNodeChanges","Controls","Background","InputNode","LLMNode","OutputNode","jsx","_jsx","jsxs","_jsxs","initialNodes","id","type","position","x","y","data","label","inputText","modelConfig","output","initialEdges","nodeTypes","inputNode","llmNode","outputNode","App","nodes","setNodes","edges","setEdges","onNodesChange","changes","nds","onEdgesChange","eds","onConnect","params","source","target","alert","handleRunWorkflow","find","node","outputNodeIndex","findIndex","console","error","response","post","model","modelName","temperature","maxTokens","topP","frequencyPenalty","presencePenalty","headers","Authorization","process","env","REACT_APP_OPENAI_API_KEY","updatedNodes","choices","message","content","style","height","children","fitView","onClick","marginTop","padding"],"sources":["D:/llm/LLM/llm-workflow-ui/llm/src/App.tsx"],"sourcesContent":["import { useState, useCallback } from 'react';\nimport axios from 'axios';\nimport ReactFlow, {\n  addEdge,\n  applyEdgeChanges,\n  applyNodeChanges,\n  Controls,\n  Background,\n  NodeChange,\n  EdgeChange,\n  Connection,\n  Edge,\n  Node,\n} from 'react-flow-renderer';\nimport { InputNode } from './components/InputNode';\nimport { LLMNode } from './components/LLMNode';\nimport { OutputNode } from './components/OutputNode';\n\n// Define initial nodes and edges\nconst initialNodes: Node[] = [\n  {\n    id: '1',\n    type: 'inputNode',\n    position: { x: 250, y: 5 },\n    data: { label: 'Input Node', inputText: '' },\n  },\n  {\n    id: '2',\n    type: 'llmNode',\n    position: { x: 250, y: 100 },\n    data: { label: 'LLM Node', modelConfig: {} },\n  },\n  {\n    id: '3',\n    type: 'outputNode',\n    position: { x: 250, y: 200 },\n    data: { label: 'Output Node', output: '' },\n  },\n];\n\nconst initialEdges: Edge[] = [];\n\nconst nodeTypes = {\n  inputNode: InputNode,\n  llmNode: LLMNode,\n  outputNode: OutputNode,\n};\n\nconst App = () => {\n  const [nodes, setNodes] = useState<Node[]>(initialNodes);\n  const [edges, setEdges] = useState<Edge[]>(initialEdges);\n\n  // Handle node changes\n  const onNodesChange = useCallback(\n    (changes: NodeChange[]) => setNodes((nds) => applyNodeChanges(changes, nds)),\n    []\n  );\n\n  // Handle edge changes\n  const onEdgesChange = useCallback(\n    (changes: EdgeChange[]) => setEdges((eds) => applyEdgeChanges(changes, eds)),\n    []\n  );\n\n  // Handle node connections (Input -> LLM -> Output)\n  const onConnect = useCallback(\n    (params: Connection | Edge) => {\n      const { source, target } = params;\n\n      // Define valid connection rules\n      if (\n        (source === '1' && target === '2') || // Input -> LLM\n        (source === '2' && target === '3') // LLM -> Output\n      ) {\n        setEdges((eds) => addEdge(params, eds));\n      } else {\n        alert('Invalid connection! Follow Input -> LLM -> Output flow.');\n      }\n    },\n    []\n  );\n\n  // Handle workflow execution\n  const handleRunWorkflow = async () => {\n    const inputNode = nodes.find((node) => node.type === 'inputNode');\n    const llmNode = nodes.find((node) => node.type === 'llmNode');\n    const outputNodeIndex = nodes.findIndex((node) => node.type === 'outputNode');\n\n    // Check if the required nodes are found\n    if (!inputNode || !llmNode || outputNodeIndex === -1) {\n      console.error('One or more nodes are not defined.');\n      alert('Please ensure that all nodes (Input, LLM, Output) are properly connected.');\n      return;\n    }\n\n    try {\n      const response = await axios.post(\n        'https://api.openai.com/v1/chat/completions',\n        {\n          inputText: inputNode.data.inputText,\n          modelConfig: {\n            model: llmNode.data.modelName,\n            temperature: llmNode.data.temperature,\n            maxTokens: llmNode.data.maxTokens,\n            topP: llmNode.data.topP,\n            frequencyPenalty: llmNode.data.frequencyPenalty,\n            presencePenalty: llmNode.data.presencePenalty,\n          },\n        },\n        {\n          headers: {\n            Authorization: `Bearer ${process.env.REACT_APP_OPENAI_API_KEY}`,\n          },\n        }\n      );\n\n      const updatedNodes = [...nodes];\n      updatedNodes[outputNodeIndex].data.output = response.data.choices[0].message.content; // Updated result handling\n      setNodes(updatedNodes);\n    } catch (error: any) {\n      console.error('Error during API call:', error.response ? error.response.data : error.message);\n      alert('An error occurred while calling the API. Please try again.');\n    }\n  };\n\n  return (\n    <div style={{ height: '100vh' }}>\n      <ReactFlow\n        nodes={nodes}\n        edges={edges}\n        onNodesChange={onNodesChange}\n        onEdgesChange={onEdgesChange}\n        onConnect={onConnect}\n        nodeTypes={nodeTypes}\n        fitView\n      >\n        \n        <Background />\n        <Controls />\n        <button onClick={handleRunWorkflow} style={{ marginTop: '10px', padding: '10px' }}>\n        Run Workflow\n      </button>\n      </ReactFlow>\n      \n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}