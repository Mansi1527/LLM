{"ast":null,"code":"var _jsxFileName = \"D:\\\\llm\\\\llm-workflow-ui\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useCallback } from 'react';\n// import axios from 'axios';\n// import ReactFlow, {\n//   addEdge,\n//   applyEdgeChanges,\n//   applyNodeChanges,\n//   Controls,\n//   Background,\n//   NodeChange,\n//   EdgeChange,\n//   Connection,\n//   Edge,\n//   Node,\n// } from 'react-flow-renderer';\n// import { InputNode } from './components/InputNode';\n// import { LLMNode } from \"./components/LLMNode\"\n// import { OutputNode } from './components/OutputNode';\n\n// // Define initial nodes and edges\n// const initialNodes: Node[] = [\n//   {\n//     id: '1',\n//     type: 'inputNode',\n//     position: { x: 250, y: 5 },\n//     data: { label: 'Input Node', inputText: '' },\n//   },\n//   {\n//     id: '2',\n//     type: 'llmNode',\n//     position: { x: 250, y: 100 },\n//     data: { label: 'LLM Node', modelConfig: {} },\n//   },\n//   {\n//     id: '3',\n//     type: 'outputNode',\n//     position: { x: 250, y: 200 },\n//     data: { label: 'Output Node', output: '' },\n//   },\n// ];\n\n// const initialEdges: Edge[] = [];\n\n// const nodeTypes = {\n//   inputNode: InputNode,\n//   llmNode: LLMNode,\n//   outputNode: OutputNode,\n// };\n\n// const App = () => {\n//   const [nodes, setNodes] = useState<Node[]>(initialNodes);\n//   const [edges, setEdges] = useState<Edge[]>(initialEdges);\n\n//   // Handle node changes\n//   const onNodesChange = useCallback(\n//     (changes: NodeChange[]) => setNodes((nds) => applyNodeChanges(changes, nds)),\n//     []\n//   );\n\n//   // Handle edge changes\n//   const onEdgesChange = useCallback(\n//     (changes: EdgeChange[]) => setEdges((eds) => applyEdgeChanges(changes, eds)),\n//     []\n//   );\n\n//   // Handle node connections (Input -> LLM -> Output)\n//   const onConnect = useCallback(\n//     (params: Connection | Edge) => {\n//       const { source, target } = params;\n\n//       // Define valid connection rules\n//       if (\n//         (source === '1' && target === '2') || // Input -> LLM\n//         (source === '2' && target === '3') // LLM -> Output\n//       ) {\n//         setEdges((eds) => addEdge(params, eds));\n//       } else {\n//         alert('Invalid connection! Follow Input -> LLM -> Output flow.');\n//       }\n//     },\n//     []\n//   );\n\n//   // Handle workflow execution\n//   const handleRunWorkflow = async () => {\n//     const inputNode = nodes.find((node) => node.type === 'inputNode');\n//     const llmNode = nodes.find((node) => node.type === 'llmNode');\n//     const outputNodeIndex = nodes.findIndex((node) => node.type === 'outputNode');\n\n//     // Check if the required nodes are found\n//     if (!inputNode || !llmNode || outputNodeIndex === -1) {\n//       console.error(\"One or more nodes are not defined.\");\n//       alert(\"Please ensure that all nodes (Input, LLM, Output) are properly connected.\");\n//       return;\n//     }\n\n//     try {\n//       const response = await axios.post('http://localhost:5000/api/openai', {\n//         inputText: inputNode.data.inputText,\n//         modelConfig: {\n//           model: llmNode.data.modelName,\n//           temperature: llmNode.data.temperature,\n//           maxTokens: llmNode.data.maxTokens,\n//           topP: llmNode.data.topP,\n//           frequencyPenalty: llmNode.data.frequencyPenalty,\n//           presencePenalty: llmNode.data.presencePenalty,\n//         },\n//       }, {\n//         headers: {\n//           'Authorization': `Bearer ${process.env.REACT_APP_OPENAI_API_KEY}`,\n//         },\n//       });\n\n//       const updatedNodes = [...nodes];\n//       updatedNodes[outputNodeIndex].data.output = response.data.result; // Ensure you access the correct structure\n//       setNodes(updatedNodes);\n//     } catch (error: any) {  // Assert the error type to 'any'\n//       console.error(\"Error during API call:\", error.response ? error.response.data : error.message);\n//       alert(\"An error occurred while calling the API. Please try again.\");\n//     }\n//   };\n\n//   return (\n//     <div style={{ height: '100vh' }}>\n//       <ReactFlow\n//         nodes={nodes}\n//         edges={edges}\n//         onNodesChange={onNodesChange}\n//         onEdgesChange={onEdgesChange}\n//         onConnect={onConnect}\n//         nodeTypes={nodeTypes}\n//         fitView\n//       >\n//         <Background />\n//         <Controls />\n//       </ReactFlow>\n//       <button onClick={handleRunWorkflow} style={{ marginTop: '10px', padding: '10px' }}>\n//         Run Workflow\n//       </button>\n//     </div>\n//   );\n// };\n\n// export default App;\n// import React, { useState, useCallback } from 'react';\n// import axios from 'axios';\n// import ReactFlow, {\n//   addEdge,\n//   applyEdgeChanges,\n//   applyNodeChanges,\n//   Controls,\n//   Background,\n//   NodeChange,\n//   EdgeChange,\n//   Connection,\n//   Edge,\n//   Node,\n// } from 'react-flow-renderer';\n// import  InputNode  from \"./components/InputNode\"\n// import  LLMNode  from './components/LLMNode';\n// import { OutputNode } from './components/OutputNode';\n\n// // Define initial nodes and edges\n// const initialNodes: Node[] = [\n//   {\n//     id: '1',\n//     type: 'inputNode',\n//     position: { x: 250, y: 5 },\n//     data: { label: 'Input Node', inputText: '' },\n//   },\n//   {\n//     id: '2',\n//     type: 'llmNode',\n//     position: { x: 250, y: 100 },\n//     data: { label: 'LLM Node', modelConfig: {} },\n//   },\n//   {\n//     id: '3',\n//     type: 'outputNode',\n//     position: { x: 250, y: 200 },\n//     data: { label: 'Output Node', output: '' },\n//   },\n// ];\n\n// const initialEdges: Edge[] = [];\n\n// const nodeTypes = {\n//   inputNode: InputNode,\n//   llmNode: LLMNode,\n//   outputNode: OutputNode,\n// };\n\n// const App = () => {\n//   const [nodes, setNodes] = useState<Node[]>(initialNodes);\n//   const [edges, setEdges] = useState<Edge[]>(initialEdges);\n\n//   // Handle node changes\n//   const onNodesChange = useCallback(\n//     (changes: NodeChange[]) => setNodes((nds) => applyNodeChanges(changes, nds)),\n//     []\n//   );\n\n//   // Handle edge changes\n//   const onEdgesChange = useCallback(\n//     (changes: EdgeChange[]) => setEdges((eds) => applyEdgeChanges(changes, eds)),\n//     []\n//   );\n\n//   // Handle node connections (Input -> LLM -> Output)\n//   const onConnect = useCallback(\n//     (params: Connection | Edge) => {\n//       const { source, target } = params;\n\n//       // Define valid connection rules\n//       if (\n//         (source === '1' && target === '2') || // Input -> LLM\n//         (source === '2' && target === '3') // LLM -> Output\n//       ) {\n//         setEdges((eds) => addEdge(params, eds));\n//       } else {\n//         alert('Invalid connection! Follow Input -> LLM -> Output flow.');\n//       }\n//     },\n//     []\n//   );\n\n//   // Handle workflow execution\n//   const handleRunWorkflow = async () => {\n//     const inputNode = nodes.find((node) => node.type === 'inputNode');\n//     const llmNode = nodes.find((node) => node.type === 'llmNode');\n//     const outputNodeIndex = nodes.findIndex((node) => node.type === 'outputNode');\n\n//     // Check if the required nodes are found\n//     if (!inputNode || !llmNode || outputNodeIndex === -1) {\n//       console.error(\"One or more nodes are not defined.\");\n//       alert(\"Please ensure that all nodes (Input, LLM, Output) are properly connected.\");\n//       return;\n//     }\n\n//     try {\n//       const response = await axios.post('https://api.openai.com/v1/chat/completions', {\n//         inputText: inputNode.data.inputText,\n//         modelConfig: {\n//           model: llmNode.data.modelConfig.modelName,\n//           temperature: llmNode.data.modelConfig.temperature,\n//           maxTokens: llmNode.data.modelConfig.maxTokens,\n//           topP: llmNode.data.modelConfig.topP,\n//           frequencyPenalty: llmNode.data.modelConfig.frequencyPenalty,\n//           presencePenalty: llmNode.data.modelConfig.presencePenalty,\n//         },\n//       }, {\n//         headers: {\n//           'Authorization': `Bearer ${process.env.REACT_APP_OPENAI_API_KEY}`,\n//         },\n//       });\n\n//       const updatedNodes = [...nodes];\n//       updatedNodes[outputNodeIndex].data.output = response.data.result; // Ensure you access the correct structure\n//       setNodes(updatedNodes);\n//       console.log(nodes)\n//     } catch (error: any) {  // Assert the error type to 'any'\n//       console.error(\"Error during API call:\", error.response ? error.response.data : error.message);\n//       alert(\"An error occurred while calling the API. Please try again.\");\n//     }\n//   };\n\n//   return (\n//     <div style={{ height: '100vh' }}>\n//       <ReactFlow\n//         nodes={nodes}\n//         edges={edges}\n//         onNodesChange={onNodesChange}\n//         onEdgesChange={onEdgesChange}\n//         onConnect={onConnect}\n//         nodeTypes={nodeTypes}\n//         fitView\n//       >\n//         <Background />\n//         <Controls />\n//       </ReactFlow>\n//       <button onClick={handleRunWorkflow} style={{ marginTop: '10px', padding: '10px' }}>\n//         Run Workflow\n//       </button>\n//     </div>\n//   );\n// };\n\n// export default App;\n\n// App.tsx\n// App.tsx\nimport React, { useState, useCallback, useRef } from 'react';\nimport ReactFlow, { addEdge, applyEdgeChanges, applyNodeChanges, Controls, Background } from 'react-flow-renderer';\nimport { InputNode } from './components/InputNode';\nimport { LLMNode } from './components/LLMNode';\nimport { OutputNode } from './components/OutputNode';\n// Import your custom edge if needed\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst nodeTypes = {\n  inputNode: InputNode,\n  llmNode: LLMNode,\n  outputNode: OutputNode\n};\n\n// const edgeTypes = {\n//   custom: CustomEdge, \n// Use your custom edge if needed\n// };\n\nconst initialNodes = [];\nconst App = () => {\n  _s();\n  const [nodes, setNodes] = useState(initialNodes);\n  const [edges, setEdges] = useState([]);\n\n  // Create a ref for the ReactFlow instance\n  const reactFlowInstance = useRef(null);\n\n  // Handle node changes\n  const onNodesChange = useCallback(changes => setNodes(nds => applyNodeChanges(changes, nds)), []);\n\n  // Handle edge changes\n  const onEdgesChange = useCallback(changes => setEdges(eds => applyEdgeChanges(changes, eds)), []);\n\n  // Handle connections\n  const onConnect = useCallback(params => {\n    setEdges(eds => addEdge({\n      ...params,\n      type: 'custom'\n    }, eds));\n  }, []);\n\n  // Drag-and-drop functionality\n  const onDrop = useCallback(event => {\n    event.preventDefault();\n    const type = event.dataTransfer.getData('application/reactflow');\n    const position = reactFlowInstance.current.project({\n      x: event.clientX,\n      y: event.clientY\n    });\n    if (type) {\n      const newNode = {\n        id: `${nodes.length + 1}`,\n        type,\n        position,\n        data: {\n          label: `${type} Node`\n        } // Customize this according to your node types\n      };\n      setNodes(nds => nds.concat(newNode));\n    }\n  }, [nodes]);\n  const onDragOver = useCallback(event => {\n    event.preventDefault();\n    event.dataTransfer.dropEffect = 'move';\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: '100vh'\n    },\n    children: [/*#__PURE__*/_jsxDEV(ReactFlow, {\n      nodes: nodes,\n      edges: edges,\n      onNodesChange: onNodesChange,\n      onEdgesChange: onEdgesChange,\n      onConnect: onConnect,\n      nodeTypes: nodeTypes\n      // edgeTypes={edgeTypes}\n      ,\n      fitView: true,\n      onDrop: onDrop,\n      onDragOver: onDragOver,\n      ref: reactFlowInstance // Attach the ref here\n      ,\n      children: [/*#__PURE__*/_jsxDEV(Background, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 398,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 399,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 385,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebar\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Drag Nodes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 402,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"drag-node\",\n        draggable: true,\n        onDragStart: event => event.dataTransfer.setData('application/reactflow', 'inputNode'),\n        children: \"Input Node\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 403,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"drag-node\",\n        draggable: true,\n        onDragStart: event => event.dataTransfer.setData('application/reactflow', 'llmNode'),\n        children: \"LLM Node\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 410,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"drag-node\",\n        draggable: true,\n        onDragStart: event => event.dataTransfer.setData('application/reactflow', 'outputNode'),\n        children: \"Output Node\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 417,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 401,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 384,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"63hflyrcic0/sYNF9i4TbNvmmiE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useCallback","useRef","ReactFlow","addEdge","applyEdgeChanges","applyNodeChanges","Controls","Background","InputNode","LLMNode","OutputNode","jsxDEV","_jsxDEV","nodeTypes","inputNode","llmNode","outputNode","initialNodes","App","_s","nodes","setNodes","edges","setEdges","reactFlowInstance","onNodesChange","changes","nds","onEdgesChange","eds","onConnect","params","type","onDrop","event","preventDefault","dataTransfer","getData","position","current","project","x","clientX","y","clientY","newNode","id","length","data","label","concat","onDragOver","dropEffect","style","height","children","fitView","ref","fileName","_jsxFileName","lineNumber","columnNumber","className","draggable","onDragStart","setData","_c","$RefreshReg$"],"sources":["D:/llm/llm-workflow-ui/src/App.tsx"],"sourcesContent":["// import React, { useState, useCallback } from 'react';\n// import axios from 'axios';\n// import ReactFlow, {\n//   addEdge,\n//   applyEdgeChanges,\n//   applyNodeChanges,\n//   Controls,\n//   Background,\n//   NodeChange,\n//   EdgeChange,\n//   Connection,\n//   Edge,\n//   Node,\n// } from 'react-flow-renderer';\n// import { InputNode } from './components/InputNode';\n// import { LLMNode } from \"./components/LLMNode\"\n// import { OutputNode } from './components/OutputNode';\n\n// // Define initial nodes and edges\n// const initialNodes: Node[] = [\n//   {\n//     id: '1',\n//     type: 'inputNode',\n//     position: { x: 250, y: 5 },\n//     data: { label: 'Input Node', inputText: '' },\n//   },\n//   {\n//     id: '2',\n//     type: 'llmNode',\n//     position: { x: 250, y: 100 },\n//     data: { label: 'LLM Node', modelConfig: {} },\n//   },\n//   {\n//     id: '3',\n//     type: 'outputNode',\n//     position: { x: 250, y: 200 },\n//     data: { label: 'Output Node', output: '' },\n//   },\n// ];\n\n// const initialEdges: Edge[] = [];\n\n// const nodeTypes = {\n//   inputNode: InputNode,\n//   llmNode: LLMNode,\n//   outputNode: OutputNode,\n// };\n\n// const App = () => {\n//   const [nodes, setNodes] = useState<Node[]>(initialNodes);\n//   const [edges, setEdges] = useState<Edge[]>(initialEdges);\n\n//   // Handle node changes\n//   const onNodesChange = useCallback(\n//     (changes: NodeChange[]) => setNodes((nds) => applyNodeChanges(changes, nds)),\n//     []\n//   );\n\n//   // Handle edge changes\n//   const onEdgesChange = useCallback(\n//     (changes: EdgeChange[]) => setEdges((eds) => applyEdgeChanges(changes, eds)),\n//     []\n//   );\n\n//   // Handle node connections (Input -> LLM -> Output)\n//   const onConnect = useCallback(\n//     (params: Connection | Edge) => {\n//       const { source, target } = params;\n\n//       // Define valid connection rules\n//       if (\n//         (source === '1' && target === '2') || // Input -> LLM\n//         (source === '2' && target === '3') // LLM -> Output\n//       ) {\n//         setEdges((eds) => addEdge(params, eds));\n//       } else {\n//         alert('Invalid connection! Follow Input -> LLM -> Output flow.');\n//       }\n//     },\n//     []\n//   );\n\n//   // Handle workflow execution\n//   const handleRunWorkflow = async () => {\n//     const inputNode = nodes.find((node) => node.type === 'inputNode');\n//     const llmNode = nodes.find((node) => node.type === 'llmNode');\n//     const outputNodeIndex = nodes.findIndex((node) => node.type === 'outputNode');\n  \n//     // Check if the required nodes are found\n//     if (!inputNode || !llmNode || outputNodeIndex === -1) {\n//       console.error(\"One or more nodes are not defined.\");\n//       alert(\"Please ensure that all nodes (Input, LLM, Output) are properly connected.\");\n//       return;\n//     }\n  \n//     try {\n//       const response = await axios.post('http://localhost:5000/api/openai', {\n//         inputText: inputNode.data.inputText,\n//         modelConfig: {\n//           model: llmNode.data.modelName,\n//           temperature: llmNode.data.temperature,\n//           maxTokens: llmNode.data.maxTokens,\n//           topP: llmNode.data.topP,\n//           frequencyPenalty: llmNode.data.frequencyPenalty,\n//           presencePenalty: llmNode.data.presencePenalty,\n//         },\n//       }, {\n//         headers: {\n//           'Authorization': `Bearer ${process.env.REACT_APP_OPENAI_API_KEY}`,\n//         },\n//       });\n  \n//       const updatedNodes = [...nodes];\n//       updatedNodes[outputNodeIndex].data.output = response.data.result; // Ensure you access the correct structure\n//       setNodes(updatedNodes);\n//     } catch (error: any) {  // Assert the error type to 'any'\n//       console.error(\"Error during API call:\", error.response ? error.response.data : error.message);\n//       alert(\"An error occurred while calling the API. Please try again.\");\n//     }\n//   };\n  \n\n//   return (\n//     <div style={{ height: '100vh' }}>\n//       <ReactFlow\n//         nodes={nodes}\n//         edges={edges}\n//         onNodesChange={onNodesChange}\n//         onEdgesChange={onEdgesChange}\n//         onConnect={onConnect}\n//         nodeTypes={nodeTypes}\n//         fitView\n//       >\n//         <Background />\n//         <Controls />\n//       </ReactFlow>\n//       <button onClick={handleRunWorkflow} style={{ marginTop: '10px', padding: '10px' }}>\n//         Run Workflow\n//       </button>\n//     </div>\n//   );\n// };\n\n// export default App;\n// import React, { useState, useCallback } from 'react';\n// import axios from 'axios';\n// import ReactFlow, {\n//   addEdge,\n//   applyEdgeChanges,\n//   applyNodeChanges,\n//   Controls,\n//   Background,\n//   NodeChange,\n//   EdgeChange,\n//   Connection,\n//   Edge,\n//   Node,\n// } from 'react-flow-renderer';\n// import  InputNode  from \"./components/InputNode\"\n// import  LLMNode  from './components/LLMNode';\n// import { OutputNode } from './components/OutputNode';\n\n// // Define initial nodes and edges\n// const initialNodes: Node[] = [\n//   {\n//     id: '1',\n//     type: 'inputNode',\n//     position: { x: 250, y: 5 },\n//     data: { label: 'Input Node', inputText: '' },\n//   },\n//   {\n//     id: '2',\n//     type: 'llmNode',\n//     position: { x: 250, y: 100 },\n//     data: { label: 'LLM Node', modelConfig: {} },\n//   },\n//   {\n//     id: '3',\n//     type: 'outputNode',\n//     position: { x: 250, y: 200 },\n//     data: { label: 'Output Node', output: '' },\n//   },\n// ];\n\n// const initialEdges: Edge[] = [];\n\n// const nodeTypes = {\n//   inputNode: InputNode,\n//   llmNode: LLMNode,\n//   outputNode: OutputNode,\n// };\n\n// const App = () => {\n//   const [nodes, setNodes] = useState<Node[]>(initialNodes);\n//   const [edges, setEdges] = useState<Edge[]>(initialEdges);\n\n//   // Handle node changes\n//   const onNodesChange = useCallback(\n//     (changes: NodeChange[]) => setNodes((nds) => applyNodeChanges(changes, nds)),\n//     []\n//   );\n\n//   // Handle edge changes\n//   const onEdgesChange = useCallback(\n//     (changes: EdgeChange[]) => setEdges((eds) => applyEdgeChanges(changes, eds)),\n//     []\n//   );\n\n//   // Handle node connections (Input -> LLM -> Output)\n//   const onConnect = useCallback(\n//     (params: Connection | Edge) => {\n//       const { source, target } = params;\n\n//       // Define valid connection rules\n//       if (\n//         (source === '1' && target === '2') || // Input -> LLM\n//         (source === '2' && target === '3') // LLM -> Output\n//       ) {\n//         setEdges((eds) => addEdge(params, eds));\n//       } else {\n//         alert('Invalid connection! Follow Input -> LLM -> Output flow.');\n//       }\n//     },\n//     []\n//   );\n\n//   // Handle workflow execution\n//   const handleRunWorkflow = async () => {\n//     const inputNode = nodes.find((node) => node.type === 'inputNode');\n//     const llmNode = nodes.find((node) => node.type === 'llmNode');\n//     const outputNodeIndex = nodes.findIndex((node) => node.type === 'outputNode');\n\n//     // Check if the required nodes are found\n//     if (!inputNode || !llmNode || outputNodeIndex === -1) {\n//       console.error(\"One or more nodes are not defined.\");\n//       alert(\"Please ensure that all nodes (Input, LLM, Output) are properly connected.\");\n//       return;\n//     }\n\n//     try {\n//       const response = await axios.post('https://api.openai.com/v1/chat/completions', {\n//         inputText: inputNode.data.inputText,\n//         modelConfig: {\n//           model: llmNode.data.modelConfig.modelName,\n//           temperature: llmNode.data.modelConfig.temperature,\n//           maxTokens: llmNode.data.modelConfig.maxTokens,\n//           topP: llmNode.data.modelConfig.topP,\n//           frequencyPenalty: llmNode.data.modelConfig.frequencyPenalty,\n//           presencePenalty: llmNode.data.modelConfig.presencePenalty,\n//         },\n//       }, {\n//         headers: {\n//           'Authorization': `Bearer ${process.env.REACT_APP_OPENAI_API_KEY}`,\n//         },\n//       });\n\n//       const updatedNodes = [...nodes];\n//       updatedNodes[outputNodeIndex].data.output = response.data.result; // Ensure you access the correct structure\n//       setNodes(updatedNodes);\n//       console.log(nodes)\n//     } catch (error: any) {  // Assert the error type to 'any'\n//       console.error(\"Error during API call:\", error.response ? error.response.data : error.message);\n//       alert(\"An error occurred while calling the API. Please try again.\");\n//     }\n//   };\n\n//   return (\n//     <div style={{ height: '100vh' }}>\n//       <ReactFlow\n//         nodes={nodes}\n//         edges={edges}\n//         onNodesChange={onNodesChange}\n//         onEdgesChange={onEdgesChange}\n//         onConnect={onConnect}\n//         nodeTypes={nodeTypes}\n//         fitView\n//       >\n//         <Background />\n//         <Controls />\n//       </ReactFlow>\n//       <button onClick={handleRunWorkflow} style={{ marginTop: '10px', padding: '10px' }}>\n//         Run Workflow\n//       </button>\n//     </div>\n//   );\n// };\n\n// export default App;\n\n\n\n\n\n// App.tsx\n// App.tsx\nimport React, { useState, useCallback, useRef } from 'react';\nimport ReactFlow, {\n  addEdge,\n  applyEdgeChanges,\n  applyNodeChanges,\n  Controls,\n  Background,\n  NodeChange,\n  EdgeChange,\n  Connection,\n  Edge,\n  Node,\n  ReactFlowProvider,\n} from 'react-flow-renderer';\nimport { InputNode } from './components/InputNode';\nimport { LLMNode } from './components/LLMNode';\nimport { OutputNode } from './components/OutputNode';\n // Import your custom edge if needed\n\nconst nodeTypes = {\n  inputNode: InputNode,\n  llmNode: LLMNode,\n  outputNode: OutputNode,\n};\n\n// const edgeTypes = {\n//   custom: CustomEdge, \n  // Use your custom edge if needed\n// };\n\nconst initialNodes: Node[] = [];\n\nconst App = () => {\n  const [nodes, setNodes] = useState<Node[]>(initialNodes);\n  const [edges, setEdges] = useState<Edge[]>([]);\n  \n  // Create a ref for the ReactFlow instance\n  const reactFlowInstance = useRef<any>(null);\n\n  // Handle node changes\n  const onNodesChange = useCallback(\n    (changes: NodeChange[]) => setNodes((nds) => applyNodeChanges(changes, nds)),\n    []\n  );\n\n  // Handle edge changes\n  const onEdgesChange = useCallback(\n    (changes: EdgeChange[]) => setEdges((eds) => applyEdgeChanges(changes, eds)),\n    []\n  );\n\n  // Handle connections\n  const onConnect = useCallback(\n    (params: Connection | Edge) => {\n      setEdges((eds) => addEdge({ ...params, type: 'custom' }, eds));\n    },\n    []\n  );\n\n  // Drag-and-drop functionality\n  const onDrop = useCallback(\n    (event: React.DragEvent) => {\n      event.preventDefault();\n      const type = event.dataTransfer.getData('application/reactflow');\n      const position = reactFlowInstance.current.project({\n        x: event.clientX,\n        y: event.clientY,\n      });\n\n      if (type) {\n        const newNode = {\n          id: `${nodes.length + 1}`,\n          type,\n          position,\n          data: { label: `${type} Node` }, // Customize this according to your node types\n        };\n        setNodes((nds) => nds.concat(newNode));\n      }\n    },\n    [nodes]\n  );\n\n  const onDragOver = useCallback((event: React.DragEvent) => {\n    event.preventDefault();\n    event.dataTransfer.dropEffect = 'move';\n  }, []);\n\n  return (\n    <div style={{ height: '100vh' }}>\n      <ReactFlow\n        nodes={nodes}\n        edges={edges}\n        onNodesChange={onNodesChange}\n        onEdgesChange={onEdgesChange}\n        onConnect={onConnect}\n        nodeTypes={nodeTypes}\n        // edgeTypes={edgeTypes}\n        fitView\n        onDrop={onDrop}\n        onDragOver={onDragOver}\n        ref={reactFlowInstance} // Attach the ref here\n      >\n        <Background />\n        <Controls />\n      </ReactFlow>\n      <div className=\"sidebar\">\n        <h3>Drag Nodes</h3>\n        <div\n          className=\"drag-node\"\n          draggable\n          onDragStart={(event) => event.dataTransfer.setData('application/reactflow', 'inputNode')}\n        >\n          Input Node\n        </div>\n        <div\n          className=\"drag-node\"\n          draggable\n          onDragStart={(event) => event.dataTransfer.setData('application/reactflow', 'llmNode')}\n        >\n          LLM Node\n        </div>\n        <div\n          className=\"drag-node\"\n          draggable\n          onDragStart={(event) => event.dataTransfer.setData('application/reactflow', 'outputNode')}\n        >\n          Output Node\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}