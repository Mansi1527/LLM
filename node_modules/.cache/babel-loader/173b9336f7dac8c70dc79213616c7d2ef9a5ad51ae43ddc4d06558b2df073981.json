{"ast":null,"code":"var _jsxFileName = \"D:\\\\llm\\\\llm-workflow-ui\\\\src\\\\components\\\\InputNode.tsx\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const InputNode = ({\n  data\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '10px',\n      background: '#D8F3DC',\n      border: '1px solid #40916C',\n      borderRadius: '5px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n      children: data.label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter Input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 5\n  }, this);\n};\n// import React, { useState } from 'react';\n\n// const InputNode = () => {\n//     const [data, setData] = useState({\n//         inputText: '',\n//         setInputText: (value: any) => setData(prev => ({ ...prev, inputText: value })),\n//     });\n\n//     const handleChange = (event: { target: { value: any; }; }) => {\n//         const { value } = event.target;\n//         data.setInputText(value); // Ensure this function is defined\n//     };\n\n//     return (\n//         <input \n//             type=\"text\" \n//             value={data.inputText} \n//             onChange={handleChange} \n//         />\n//     );\n// };\n\n// export default InputNode;\n// InputNode.tsx\n_c = InputNode;\nvar _c;\n$RefreshReg$(_c, \"InputNode\");","map":{"version":3,"names":["InputNode","data","_jsxDEV","style","padding","background","border","borderRadius","children","label","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","_c","$RefreshReg$"],"sources":["D:/llm/llm-workflow-ui/src/components/InputNode.tsx"],"sourcesContent":["\r\ninterface LLMNodeProps {\r\n    data: {\r\n      label: string; // Define the structure of the data prop here\r\n    };\r\n  }\r\nexport const InputNode: React.FC<LLMNodeProps> = ({ data }) => {\r\n  return (\r\n    <div style={{ padding: '10px', background: '#D8F3DC', border: '1px solid #40916C', borderRadius: '5px' }}>\r\n      <strong>{data.label}</strong>\r\n      <div>\r\n        <input type=\"text\" placeholder=\"Enter Input\" />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n// import React, { useState } from 'react';\r\n\r\n// const InputNode = () => {\r\n//     const [data, setData] = useState({\r\n//         inputText: '',\r\n//         setInputText: (value: any) => setData(prev => ({ ...prev, inputText: value })),\r\n//     });\r\n\r\n//     const handleChange = (event: { target: { value: any; }; }) => {\r\n//         const { value } = event.target;\r\n//         data.setInputText(value); // Ensure this function is defined\r\n//     };\r\n\r\n//     return (\r\n//         <input \r\n//             type=\"text\" \r\n//             value={data.inputText} \r\n//             onChange={handleChange} \r\n//         />\r\n//     );\r\n// };\r\n\r\n// export default InputNode;\r\n// InputNode.tsx\r\n"],"mappings":";;AAMA,OAAO,MAAMA,SAAiC,GAAGA,CAAC;EAAEC;AAAK,CAAC,KAAK;EAC7D,oBACEC,OAAA;IAAKC,KAAK,EAAE;MAAEC,OAAO,EAAE,MAAM;MAAEC,UAAU,EAAE,SAAS;MAAEC,MAAM,EAAE,mBAAmB;MAAEC,YAAY,EAAE;IAAM,CAAE;IAAAC,QAAA,gBACvGN,OAAA;MAAAM,QAAA,EAASP,IAAI,CAACQ;IAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAS,CAAC,eAC7BX,OAAA;MAAAM,QAAA,eACEN,OAAA;QAAOY,IAAI,EAAC,MAAM;QAACC,WAAW,EAAC;MAAa;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5C,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AACD;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAAAG,EAAA,GAjCahB,SAAiC;AAAA,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}