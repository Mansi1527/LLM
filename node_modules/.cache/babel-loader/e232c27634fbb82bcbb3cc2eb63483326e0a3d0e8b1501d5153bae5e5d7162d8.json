{"ast":null,"code":"var _jsxFileName = \"D:\\\\llm\\\\llm-workflow-ui\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useCallback } from 'react';\n// import ReactFlow, {\n//   addEdge,\n//   applyEdgeChanges,\n//   applyNodeChanges,\n//   Controls,\n//   Background,\n//   NodeChange,\n//   EdgeChange,\n//   Connection,\n//   Edge,\n//   Node,\n// } from 'react-flow-renderer';\n// import { InputNode } from './components/InputNode';\n// import { LLMNode } from \"./components/LLMNode\";\n// import { OutputNode } from \"./components/OutputNode\";\n\n// // Type the nodes and edges correctly\n// const initialNodes: Node[] = [\n//   {\n//     id: '1',\n//     type: 'inputNode',\n//     position: { x: 250, y: 5 },\n//     data: { label: 'Input Node' },\n//   },\n//   {\n//     id: '2',\n//     type: 'llmNode',\n//     position: { x: 250, y: 100 },\n//     data: { label: 'LLM Node' },\n//   },\n//   {\n//     id: '3',\n//     type: 'outputNode',\n//     position: { x: 250, y: 200 },\n//     data: { label: 'Output Node' },\n//   },\n// ];\n\n// const initialEdges: Edge[] = [];\n\n// const nodeTypes = {\n//   inputNode: InputNode,\n//   llmNode: LLMNode,\n//   outputNode: OutputNode,\n// };\n\n// const App = () => {\n//   const [nodes, setNodes] = useState<Node[]>(initialNodes);\n//   const [edges, setEdges] = useState<Edge[]>(initialEdges);\n\n//   // Ensure the changes are typed correctly\n//   const onNodesChange = useCallback((changes: NodeChange[]) => setNodes((nds) => applyNodeChanges(changes, nds)), []);\n//   const onEdgesChange = useCallback((changes: EdgeChange[]) => setEdges((eds) => applyEdgeChanges(changes, eds)), []);\n//   const onConnect = useCallback((params: Edge<any> | Connection) => setEdges((eds) => addEdge(params, eds)), []);\n\n//   return (\n//     <div style={{ height: '100vh' }}>\n//       <ReactFlow\n//         nodes={nodes}\n//         edges={edges}\n//         onNodesChange={onNodesChange}\n//         onEdgesChange={onEdgesChange}\n//         onConnect={onConnect}\n//         nodeTypes={nodeTypes}\n//         fitView\n//       >\n//         <Background />\n//         <Controls />\n//       </ReactFlow>\n//     </div>\n//   );\n// };\n\n// export default App;\nimport React, { useState, useCallback } from 'react';\nimport ReactFlow, { addEdge, applyEdgeChanges, applyNodeChanges, Controls, Background } from 'react-flow-renderer';\nimport { InputNode } from './components/InputNode';\nimport { LLMNode } from './components/LLMNode';\nimport { OutputNode } from './components/OutputNode';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialNodes = [{\n  id: '1',\n  type: 'inputNode',\n  position: {\n    x: 100,\n    y: 100\n  },\n  data: {\n    label: 'Input Node',\n    inputText: ''\n  }\n}, {\n  id: '2',\n  type: 'llmNode',\n  position: {\n    x: 300,\n    y: 100\n  },\n  data: {\n    label: 'LLM Node',\n    modelConfig: 'text-davinci-003'\n  }\n}, {\n  id: '3',\n  type: 'outputNode',\n  position: {\n    x: 500,\n    y: 100\n  },\n  data: {\n    label: 'Output Node',\n    output: ''\n  }\n}];\nconst nodeTypes = {\n  inputNode: InputNode,\n  llmNode: LLMNode,\n  outputNode: OutputNode\n};\nconst App = () => {\n  _s();\n  const [nodes, setNodes] = useState(initialNodes);\n  const [edges, setEdges] = useState([]);\n  const onNodesChange = useCallback(changes => setNodes(nds => applyNodeChanges(changes, nds)), []);\n  const onEdgesChange = useCallback(changes => setEdges(eds => applyEdgeChanges(changes, eds)), []);\n  const onConnect = useCallback(params => setEdges(eds => addEdge(params, eds)), []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: '100vh'\n    },\n    children: /*#__PURE__*/_jsxDEV(ReactFlow, {\n      nodes: nodes,\n      edges: edges,\n      onNodesChange: onNodesChange,\n      onEdgesChange: onEdgesChange,\n      onConnect: onConnect,\n      nodeTypes: nodeTypes,\n      fitView: true,\n      children: [/*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Background, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"tNTkVOG8CgXFEBzSwIoMF7UOPoY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useCallback","ReactFlow","addEdge","applyEdgeChanges","applyNodeChanges","Controls","Background","InputNode","LLMNode","OutputNode","jsxDEV","_jsxDEV","initialNodes","id","type","position","x","y","data","label","inputText","modelConfig","output","nodeTypes","inputNode","llmNode","outputNode","App","_s","nodes","setNodes","edges","setEdges","onNodesChange","changes","nds","onEdgesChange","eds","onConnect","params","style","height","children","fitView","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/llm/llm-workflow-ui/src/App.tsx"],"sourcesContent":["// import React, { useState, useCallback } from 'react';\n// import ReactFlow, {\n//   addEdge,\n//   applyEdgeChanges,\n//   applyNodeChanges,\n//   Controls,\n//   Background,\n//   NodeChange,\n//   EdgeChange,\n//   Connection,\n//   Edge,\n//   Node,\n// } from 'react-flow-renderer';\n// import { InputNode } from './components/InputNode';\n// import { LLMNode } from \"./components/LLMNode\";\n// import { OutputNode } from \"./components/OutputNode\";\n\n// // Type the nodes and edges correctly\n// const initialNodes: Node[] = [\n//   {\n//     id: '1',\n//     type: 'inputNode',\n//     position: { x: 250, y: 5 },\n//     data: { label: 'Input Node' },\n//   },\n//   {\n//     id: '2',\n//     type: 'llmNode',\n//     position: { x: 250, y: 100 },\n//     data: { label: 'LLM Node' },\n//   },\n//   {\n//     id: '3',\n//     type: 'outputNode',\n//     position: { x: 250, y: 200 },\n//     data: { label: 'Output Node' },\n//   },\n// ];\n\n// const initialEdges: Edge[] = [];\n\n// const nodeTypes = {\n//   inputNode: InputNode,\n//   llmNode: LLMNode,\n//   outputNode: OutputNode,\n// };\n\n// const App = () => {\n//   const [nodes, setNodes] = useState<Node[]>(initialNodes);\n//   const [edges, setEdges] = useState<Edge[]>(initialEdges);\n\n//   // Ensure the changes are typed correctly\n//   const onNodesChange = useCallback((changes: NodeChange[]) => setNodes((nds) => applyNodeChanges(changes, nds)), []);\n//   const onEdgesChange = useCallback((changes: EdgeChange[]) => setEdges((eds) => applyEdgeChanges(changes, eds)), []);\n//   const onConnect = useCallback((params: Edge<any> | Connection) => setEdges((eds) => addEdge(params, eds)), []);\n\n//   return (\n//     <div style={{ height: '100vh' }}>\n//       <ReactFlow\n//         nodes={nodes}\n//         edges={edges}\n//         onNodesChange={onNodesChange}\n//         onEdgesChange={onEdgesChange}\n//         onConnect={onConnect}\n//         nodeTypes={nodeTypes}\n//         fitView\n//       >\n//         <Background />\n//         <Controls />\n//       </ReactFlow>\n//     </div>\n//   );\n// };\n\n// export default App;\nimport React, { useState, useCallback } from 'react';\nimport ReactFlow, { addEdge, applyEdgeChanges, applyNodeChanges, Controls, Background, Connection, Edge } from 'react-flow-renderer';\nimport { InputNode } from './components/InputNode';\nimport { LLMNode } from './components/LLMNode';\nimport { OutputNode } from './components/OutputNode';\n\nconst initialNodes = [\n  { id: '1', type: 'inputNode', position: { x: 100, y: 100 }, data: { label: 'Input Node', inputText: '' } },\n  { id: '2', type: 'llmNode', position: { x: 300, y: 100 }, data: { label: 'LLM Node', modelConfig: 'text-davinci-003' } },\n  { id: '3', type: 'outputNode', position: { x: 500, y: 100 }, data: { label: 'Output Node', output: '' } },\n];\n\nconst nodeTypes = { inputNode: InputNode, llmNode: LLMNode, outputNode: OutputNode };\n\nconst App = () => {\n  const [nodes, setNodes] = useState(initialNodes);\n  const [edges, setEdges] = useState([]);\n\n  const onNodesChange = useCallback((changes) => setNodes((nds) => applyNodeChanges(changes, nds)), []);\n  const onEdgesChange = useCallback((changes) => setEdges((eds) => applyEdgeChanges(changes, eds)), []);\n  const onConnect = useCallback((params) => setEdges((eds) => addEdge(params, eds)), []);\n\n  return (\n    <div style={{ height: '100vh' }}>\n      <ReactFlow\n        nodes={nodes}\n        edges={edges}\n        onNodesChange={onNodesChange}\n        onEdgesChange={onEdgesChange}\n        onConnect={onConnect}\n        nodeTypes={nodeTypes}\n        fitView\n      >\n        <Controls />\n        <Background />\n      </ReactFlow>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}