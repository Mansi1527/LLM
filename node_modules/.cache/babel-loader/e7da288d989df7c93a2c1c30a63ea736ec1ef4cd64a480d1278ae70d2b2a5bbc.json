{"ast":null,"code":"var _jsxFileName = \"D:\\\\llm\\\\llm-workflow-ui\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useCallback } from 'react';\n// import axios from 'axios';\n// import ReactFlow, {\n//   addEdge,\n//   applyEdgeChanges,\n//   applyNodeChanges,\n//   Controls,\n//   Background,\n//   NodeChange,\n//   EdgeChange,\n//   Connection,\n//   Edge,\n//   Node,\n// } from 'react-flow-renderer';\n// import { InputNode } from './components/InputNode';\n// import { LLMNode } from \"./components/LLMNode\"\n// import { OutputNode } from './components/OutputNode';\n\n// // Define initial nodes and edges\n// const initialNodes: Node[] = [\n//   {\n//     id: '1',\n//     type: 'inputNode',\n//     position: { x: 250, y: 5 },\n//     data: { label: 'Input Node', inputText: '' },\n//   },\n//   {\n//     id: '2',\n//     type: 'llmNode',\n//     position: { x: 250, y: 100 },\n//     data: { label: 'LLM Node', modelConfig: {} },\n//   },\n//   {\n//     id: '3',\n//     type: 'outputNode',\n//     position: { x: 250, y: 200 },\n//     data: { label: 'Output Node', output: '' },\n//   },\n// ];\n\n// const initialEdges: Edge[] = [];\n\n// const nodeTypes = {\n//   inputNode: InputNode,\n//   llmNode: LLMNode,\n//   outputNode: OutputNode,\n// };\n\n// const App = () => {\n//   const [nodes, setNodes] = useState<Node[]>(initialNodes);\n//   const [edges, setEdges] = useState<Edge[]>(initialEdges);\n\n//   // Handle node changes\n//   const onNodesChange = useCallback(\n//     (changes: NodeChange[]) => setNodes((nds) => applyNodeChanges(changes, nds)),\n//     []\n//   );\n\n//   // Handle edge changes\n//   const onEdgesChange = useCallback(\n//     (changes: EdgeChange[]) => setEdges((eds) => applyEdgeChanges(changes, eds)),\n//     []\n//   );\n\n//   // Handle node connections (Input -> LLM -> Output)\n//   const onConnect = useCallback(\n//     (params: Connection | Edge) => {\n//       const { source, target } = params;\n\n//       // Define valid connection rules\n//       if (\n//         (source === '1' && target === '2') || // Input -> LLM\n//         (source === '2' && target === '3') // LLM -> Output\n//       ) {\n//         setEdges((eds) => addEdge(params, eds));\n//       } else {\n//         alert('Invalid connection! Follow Input -> LLM -> Output flow.');\n//       }\n//     },\n//     []\n//   );\n\n//   // Handle workflow execution\n//   const handleRunWorkflow = async () => {\n//     const inputNode = nodes.find((node) => node.type === 'inputNode');\n//     const llmNode = nodes.find((node) => node.type === 'llmNode');\n//     const outputNodeIndex = nodes.findIndex((node) => node.type === 'outputNode');\n\n//     // Check if the required nodes are found\n//     if (!inputNode || !llmNode || outputNodeIndex === -1) {\n//       console.error(\"One or more nodes are not defined.\");\n//       alert(\"Please ensure that all nodes (Input, LLM, Output) are properly connected.\");\n//       return;\n//     }\n\n//     try {\n//       const response = await axios.post('http://localhost:5000/api/openai', {\n//         inputText: inputNode.data.inputText,\n//         modelConfig: {\n//           model: llmNode.data.modelName,\n//           temperature: llmNode.data.temperature,\n//           maxTokens: llmNode.data.maxTokens,\n//           topP: llmNode.data.topP,\n//           frequencyPenalty: llmNode.data.frequencyPenalty,\n//           presencePenalty: llmNode.data.presencePenalty,\n//         },\n//       }, {\n//         headers: {\n//           'Authorization': `Bearer ${process.env.REACT_APP_OPENAI_API_KEY}`,\n//         },\n//       });\n\n//       const updatedNodes = [...nodes];\n//       updatedNodes[outputNodeIndex].data.output = response.data.result; // Ensure you access the correct structure\n//       setNodes(updatedNodes);\n//     } catch (error: any) {  // Assert the error type to 'any'\n//       console.error(\"Error during API call:\", error.response ? error.response.data : error.message);\n//       alert(\"An error occurred while calling the API. Please try again.\");\n//     }\n//   };\n\n//   return (\n//     <div style={{ height: '100vh' }}>\n//       <ReactFlow\n//         nodes={nodes}\n//         edges={edges}\n//         onNodesChange={onNodesChange}\n//         onEdgesChange={onEdgesChange}\n//         onConnect={onConnect}\n//         nodeTypes={nodeTypes}\n//         fitView\n//       >\n//         <Background />\n//         <Controls />\n//       </ReactFlow>\n//       <button onClick={handleRunWorkflow} style={{ marginTop: '10px', padding: '10px' }}>\n//         Run Workflow\n//       </button>\n//     </div>\n//   );\n// };\n\n// export default App;\n// import React, { useState, useCallback } from 'react';\n// import axios from 'axios';\n// import ReactFlow, {\n//   addEdge,\n//   applyEdgeChanges,\n//   applyNodeChanges,\n//   Controls,\n//   Background,\n//   NodeChange,\n//   EdgeChange,\n//   Connection,\n//   Edge,\n//   Node,\n// } from 'react-flow-renderer';\n// import  InputNode  from \"./components/InputNode\"\n// import  LLMNode  from './components/LLMNode';\n// import { OutputNode } from './components/OutputNode';\n\n// // Define initial nodes and edges\n// const initialNodes: Node[] = [\n//   {\n//     id: '1',\n//     type: 'inputNode',\n//     position: { x: 250, y: 5 },\n//     data: { label: 'Input Node', inputText: '' },\n//   },\n//   {\n//     id: '2',\n//     type: 'llmNode',\n//     position: { x: 250, y: 100 },\n//     data: { label: 'LLM Node', modelConfig: {} },\n//   },\n//   {\n//     id: '3',\n//     type: 'outputNode',\n//     position: { x: 250, y: 200 },\n//     data: { label: 'Output Node', output: '' },\n//   },\n// ];\n\n// const initialEdges: Edge[] = [];\n\n// const nodeTypes = {\n//   inputNode: InputNode,\n//   llmNode: LLMNode,\n//   outputNode: OutputNode,\n// };\n\n// const App = () => {\n//   const [nodes, setNodes] = useState<Node[]>(initialNodes);\n//   const [edges, setEdges] = useState<Edge[]>(initialEdges);\n\n//   // Handle node changes\n//   const onNodesChange = useCallback(\n//     (changes: NodeChange[]) => setNodes((nds) => applyNodeChanges(changes, nds)),\n//     []\n//   );\n\n//   // Handle edge changes\n//   const onEdgesChange = useCallback(\n//     (changes: EdgeChange[]) => setEdges((eds) => applyEdgeChanges(changes, eds)),\n//     []\n//   );\n\n//   // Handle node connections (Input -> LLM -> Output)\n//   const onConnect = useCallback(\n//     (params: Connection | Edge) => {\n//       const { source, target } = params;\n\n//       // Define valid connection rules\n//       if (\n//         (source === '1' && target === '2') || // Input -> LLM\n//         (source === '2' && target === '3') // LLM -> Output\n//       ) {\n//         setEdges((eds) => addEdge(params, eds));\n//       } else {\n//         alert('Invalid connection! Follow Input -> LLM -> Output flow.');\n//       }\n//     },\n//     []\n//   );\n\n//   // Handle workflow execution\n//   const handleRunWorkflow = async () => {\n//     const inputNode = nodes.find((node) => node.type === 'inputNode');\n//     const llmNode = nodes.find((node) => node.type === 'llmNode');\n//     const outputNodeIndex = nodes.findIndex((node) => node.type === 'outputNode');\n\n//     // Check if the required nodes are found\n//     if (!inputNode || !llmNode || outputNodeIndex === -1) {\n//       console.error(\"One or more nodes are not defined.\");\n//       alert(\"Please ensure that all nodes (Input, LLM, Output) are properly connected.\");\n//       return;\n//     }\n\n//     try {\n//       const response = await axios.post('https://api.openai.com/v1/chat/completions', {\n//         inputText: inputNode.data.inputText,\n//         modelConfig: {\n//           model: llmNode.data.modelConfig.modelName,\n//           temperature: llmNode.data.modelConfig.temperature,\n//           maxTokens: llmNode.data.modelConfig.maxTokens,\n//           topP: llmNode.data.modelConfig.topP,\n//           frequencyPenalty: llmNode.data.modelConfig.frequencyPenalty,\n//           presencePenalty: llmNode.data.modelConfig.presencePenalty,\n//         },\n//       }, {\n//         headers: {\n//           'Authorization': `Bearer ${process.env.REACT_APP_OPENAI_API_KEY}`,\n//         },\n//       });\n\n//       const updatedNodes = [...nodes];\n//       updatedNodes[outputNodeIndex].data.output = response.data.result; // Ensure you access the correct structure\n//       setNodes(updatedNodes);\n//       console.log(nodes)\n//     } catch (error: any) {  // Assert the error type to 'any'\n//       console.error(\"Error during API call:\", error.response ? error.response.data : error.message);\n//       alert(\"An error occurred while calling the API. Please try again.\");\n//     }\n//   };\n\n//   return (\n//     <div style={{ height: '100vh' }}>\n//       <ReactFlow\n//         nodes={nodes}\n//         edges={edges}\n//         onNodesChange={onNodesChange}\n//         onEdgesChange={onEdgesChange}\n//         onConnect={onConnect}\n//         nodeTypes={nodeTypes}\n//         fitView\n//       >\n//         <Background />\n//         <Controls />\n//       </ReactFlow>\n//       <button onClick={handleRunWorkflow} style={{ marginTop: '10px', padding: '10px' }}>\n//         Run Workflow\n//       </button>\n//     </div>\n//   );\n// };\n\n// export default App;\n\n// App.tsx\n// App.tsx\n// import React, { useState, useCallback, useRef } from 'react';\n// import ReactFlow, {\n//   addEdge,\n//   applyEdgeChanges,\n//   applyNodeChanges,\n//   Controls,\n//   Background,\n//   NodeChange,\n//   EdgeChange,\n//   Connection,\n//   Edge,\n//   Node,\n//   ReactFlowProvider,\n// } from 'react-flow-renderer';\n// import { InputNode } from './components/InputNode';\n// import { LLMNode } from './components/LLMNode';\n// import { OutputNode } from './components/OutputNode';\n//  // Import your custom edge if needed\n\n// const nodeTypes = {\n//   inputNode: InputNode,\n//   llmNode: LLMNode,\n//   outputNode: OutputNode,\n// };\n\n// // const edgeTypes = {\n// //   custom: CustomEdge, \n//   // Use your custom edge if needed\n// // };\n\n// const initialNodes: Node[] = [];\n\n// const App = () => {\n//   const [nodes, setNodes] = useState<Node[]>(initialNodes);\n//   const [edges, setEdges] = useState<Edge[]>([]);\n\n//   // Create a ref for the ReactFlow instance\n//   const reactFlowInstance = useRef<any>(null);\n\n//   // Handle node changes\n//   const onNodesChange = useCallback(\n//     (changes: NodeChange[]) => setNodes((nds) => applyNodeChanges(changes, nds)),\n//     []\n//   );\n\n//   // Handle edge changes\n//   const onEdgesChange = useCallback(\n//     (changes: EdgeChange[]) => setEdges((eds) => applyEdgeChanges(changes, eds)),\n//     []\n//   );\n\n//   // Handle connections\n//   const onConnect = useCallback(\n//     (params: Connection | Edge) => {\n//       setEdges((eds) => addEdge({ ...params, type: 'custom' }, eds));\n//     },\n//     []\n//   );\n\n//   // Drag-and-drop functionality\n//   const onDrop = useCallback(\n//     (event: React.DragEvent) => {\n//       event.preventDefault();\n//       const type = event.dataTransfer.getData('application/reactflow');\n//       const position = reactFlowInstance.current.project({\n//         x: event.clientX,\n//         y: event.clientY,\n//       });\n\n//       if (type) {\n//         const newNode = {\n//           id: `${nodes.length + 1}`,\n//           type,\n//           position,\n//           data: { label: `${type} Node` }, // Customize this according to your node types\n//         };\n//         setNodes((nds) => nds.concat(newNode));\n//       }\n//     },\n//     [nodes]\n//   );\n\n//   const onDragOver = useCallback((event: React.DragEvent) => {\n//     event.preventDefault();\n//     event.dataTransfer.dropEffect = 'move';\n//   }, []);\n\n//   return (\n//     <div style={{ height: '100vh' }}>\n//       <ReactFlow\n//         nodes={nodes}\n//         edges={edges}\n//         onNodesChange={onNodesChange}\n//         onEdgesChange={onEdgesChange}\n//         onConnect={onConnect}\n//         nodeTypes={nodeTypes}\n//         // edgeTypes={edgeTypes}\n//         fitView\n//         onDrop={onDrop}\n//         onDragOver={onDragOver}\n//         ref={reactFlowInstance} // Attach the ref here\n//       >\n//         <Background />\n//         <Controls />\n//       </ReactFlow>\n//       <div className=\"sidebar\">\n//         <h3>Drag Nodes</h3>\n//         <div\n//           className=\"drag-node\"\n//           draggable\n//           onDragStart={(event) => event.dataTransfer.setData('application/reactflow', 'inputNode')}\n//         >\n//           Input Node\n//           <InputNode data={{\n//             label: '',\n//             inputText: ''\n//           }} onChange={function (inputText: string): void {\n//             throw new Error('Function not implemented.');\n//           } } />\n//         </div>\n//         <div\n//           className=\"drag-node\"\n//           draggable\n//           onDragStart={(event) => event.dataTransfer.setData('application/reactflow', 'llmNode')}\n//         >\n//           LLM Node\n//         </div>\n//         <div\n//           className=\"drag-node\"\n//           draggable\n//           onDragStart={(event) => event.dataTransfer.setData('application/reactflow', 'outputNode')}\n//         >\n//           Output Node\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default App;\n\nimport React, { useState, useCallback } from 'react';\nimport axios from 'axios';\nimport ReactFlow, { addEdge, applyEdgeChanges, applyNodeChanges, Controls, Background, useReactFlow, ReactFlowProvider } from 'react-flow-renderer';\nimport { InputNode } from './components/InputNode';\nimport { LLMNode } from './components/LLMNode';\nimport { OutputNode } from './components/OutputNode';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst nodeTypes = {\n  inputNode: InputNode,\n  llmNode: LLMNode,\n  outputNode: OutputNode\n};\nconst initialNodes = [];\nconst App = () => {\n  _s();\n  const [nodes, setNodes] = useState(initialNodes);\n  const [edges, setEdges] = useState([]);\n  const [inputText, setInputText] = useState('');\n  const [modelConfig, setModelConfig] = useState('');\n  const {\n    project\n  } = useReactFlow();\n  const onNodesChange = useCallback(changes => setNodes(nds => applyNodeChanges(changes, nds)), []);\n  const onEdgesChange = useCallback(changes => setEdges(eds => applyEdgeChanges(changes, eds)), []);\n  const onConnect = useCallback(params => {\n    setEdges(eds => addEdge({\n      ...params,\n      type: 'custom'\n    }, eds));\n  }, []);\n  const onDrop = useCallback(event => {\n    event.preventDefault();\n    const type = event.dataTransfer.getData('application/reactflow');\n    const position = project({\n      x: event.clientX,\n      y: event.clientY\n    });\n    if (type) {\n      const newNode = {\n        id: `${nodes.length + 1}`,\n        type,\n        position,\n        data: {\n          label: `${type} Node`\n        }\n      };\n      setNodes(nds => nds.concat(newNode));\n    }\n  }, [nodes, project]);\n  const onDragOver = useCallback(event => {\n    event.preventDefault();\n    event.dataTransfer.dropEffect = 'move';\n  }, []);\n  const handleRunWorkflow = async () => {\n    const inputNode = nodes.find(node => node.type === 'inputNode');\n    const llmNode = nodes.find(node => node.type === 'llmNode');\n    const outputNodeIndex = nodes.findIndex(node => node.type === 'outputNode');\n    if (!inputNode || !llmNode || outputNodeIndex === -1) {\n      console.error(\"One or more nodes are not defined.\");\n      alert(\"Please ensure that all nodes (Input, LLM, Output) are properly connected.\");\n      return;\n    }\n    try {\n      const response = await axios.post('https://api.openai.com/v1/chat/completions', {\n        inputText: inputNode.data.inputText,\n        modelConfig: llmNode.data.modelConfig\n      });\n      const updatedNodes = [...nodes];\n      updatedNodes[outputNodeIndex].data.output = response.data.result;\n      setNodes(updatedNodes);\n    } catch (error) {\n      console.error(\"Error during API call:\", error.response ? error.response.data : error.message);\n      alert(\"An error occurred while calling the API. Please try again.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(ReactFlowProvider, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: '100vh'\n      },\n      children: [/*#__PURE__*/_jsxDEV(ReactFlow, {\n        nodes: nodes,\n        edges: edges,\n        onNodesChange: onNodesChange,\n        onEdgesChange: onEdgesChange,\n        onConnect: onConnect,\n        nodeTypes: nodeTypes,\n        fitView: true,\n        onDrop: onDrop,\n        onDragOver: onDragOver,\n        children: [/*#__PURE__*/_jsxDEV(Background, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 560,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 561,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 550,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sidebar\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Drag Nodes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 564,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"drag-node\",\n          draggable: true,\n          onDragStart: event => event.dataTransfer.setData('application/reactflow', 'inputNode'),\n          children: [\"Input Node\", /*#__PURE__*/_jsxDEV(InputNode, {\n            data: {\n              label: 'Enter your prompt',\n              inputText: ''\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 571,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 565,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"drag-node\",\n          draggable: true,\n          onDragStart: event => event.dataTransfer.setData('application/reactflow', 'llmNode'),\n          children: [\"LLM Node\", /*#__PURE__*/_jsxDEV(LLMNode, {\n            data: {\n              label: 'Model Config',\n              modelConfig: ''\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 579,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 573,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"drag-node\",\n          draggable: true,\n          onDragStart: event => event.dataTransfer.setData('application/reactflow', 'outputNode'),\n          children: \"Output Node\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 581,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 563,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleRunWorkflow,\n        style: {\n          marginTop: '10px',\n          padding: '10px'\n        },\n        children: \"Run Workflow\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 589,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 549,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 548,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"zH6UcfC6StGMjxOvJR+1Kg3oke0=\", false, function () {\n  return [useReactFlow];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useCallback","axios","ReactFlow","addEdge","applyEdgeChanges","applyNodeChanges","Controls","Background","useReactFlow","ReactFlowProvider","InputNode","LLMNode","OutputNode","jsxDEV","_jsxDEV","nodeTypes","inputNode","llmNode","outputNode","initialNodes","App","_s","nodes","setNodes","edges","setEdges","inputText","setInputText","modelConfig","setModelConfig","project","onNodesChange","changes","nds","onEdgesChange","eds","onConnect","params","type","onDrop","event","preventDefault","dataTransfer","getData","position","x","clientX","y","clientY","newNode","id","length","data","label","concat","onDragOver","dropEffect","handleRunWorkflow","find","node","outputNodeIndex","findIndex","console","error","alert","response","post","updatedNodes","output","result","message","children","style","height","fitView","fileName","_jsxFileName","lineNumber","columnNumber","className","draggable","onDragStart","setData","onClick","marginTop","padding","_c","$RefreshReg$"],"sources":["D:/llm/llm-workflow-ui/src/App.tsx"],"sourcesContent":["// import React, { useState, useCallback } from 'react';\n// import axios from 'axios';\n// import ReactFlow, {\n//   addEdge,\n//   applyEdgeChanges,\n//   applyNodeChanges,\n//   Controls,\n//   Background,\n//   NodeChange,\n//   EdgeChange,\n//   Connection,\n//   Edge,\n//   Node,\n// } from 'react-flow-renderer';\n// import { InputNode } from './components/InputNode';\n// import { LLMNode } from \"./components/LLMNode\"\n// import { OutputNode } from './components/OutputNode';\n\n// // Define initial nodes and edges\n// const initialNodes: Node[] = [\n//   {\n//     id: '1',\n//     type: 'inputNode',\n//     position: { x: 250, y: 5 },\n//     data: { label: 'Input Node', inputText: '' },\n//   },\n//   {\n//     id: '2',\n//     type: 'llmNode',\n//     position: { x: 250, y: 100 },\n//     data: { label: 'LLM Node', modelConfig: {} },\n//   },\n//   {\n//     id: '3',\n//     type: 'outputNode',\n//     position: { x: 250, y: 200 },\n//     data: { label: 'Output Node', output: '' },\n//   },\n// ];\n\n// const initialEdges: Edge[] = [];\n\n// const nodeTypes = {\n//   inputNode: InputNode,\n//   llmNode: LLMNode,\n//   outputNode: OutputNode,\n// };\n\n// const App = () => {\n//   const [nodes, setNodes] = useState<Node[]>(initialNodes);\n//   const [edges, setEdges] = useState<Edge[]>(initialEdges);\n\n//   // Handle node changes\n//   const onNodesChange = useCallback(\n//     (changes: NodeChange[]) => setNodes((nds) => applyNodeChanges(changes, nds)),\n//     []\n//   );\n\n//   // Handle edge changes\n//   const onEdgesChange = useCallback(\n//     (changes: EdgeChange[]) => setEdges((eds) => applyEdgeChanges(changes, eds)),\n//     []\n//   );\n\n//   // Handle node connections (Input -> LLM -> Output)\n//   const onConnect = useCallback(\n//     (params: Connection | Edge) => {\n//       const { source, target } = params;\n\n//       // Define valid connection rules\n//       if (\n//         (source === '1' && target === '2') || // Input -> LLM\n//         (source === '2' && target === '3') // LLM -> Output\n//       ) {\n//         setEdges((eds) => addEdge(params, eds));\n//       } else {\n//         alert('Invalid connection! Follow Input -> LLM -> Output flow.');\n//       }\n//     },\n//     []\n//   );\n\n//   // Handle workflow execution\n//   const handleRunWorkflow = async () => {\n//     const inputNode = nodes.find((node) => node.type === 'inputNode');\n//     const llmNode = nodes.find((node) => node.type === 'llmNode');\n//     const outputNodeIndex = nodes.findIndex((node) => node.type === 'outputNode');\n  \n//     // Check if the required nodes are found\n//     if (!inputNode || !llmNode || outputNodeIndex === -1) {\n//       console.error(\"One or more nodes are not defined.\");\n//       alert(\"Please ensure that all nodes (Input, LLM, Output) are properly connected.\");\n//       return;\n//     }\n  \n//     try {\n//       const response = await axios.post('http://localhost:5000/api/openai', {\n//         inputText: inputNode.data.inputText,\n//         modelConfig: {\n//           model: llmNode.data.modelName,\n//           temperature: llmNode.data.temperature,\n//           maxTokens: llmNode.data.maxTokens,\n//           topP: llmNode.data.topP,\n//           frequencyPenalty: llmNode.data.frequencyPenalty,\n//           presencePenalty: llmNode.data.presencePenalty,\n//         },\n//       }, {\n//         headers: {\n//           'Authorization': `Bearer ${process.env.REACT_APP_OPENAI_API_KEY}`,\n//         },\n//       });\n  \n//       const updatedNodes = [...nodes];\n//       updatedNodes[outputNodeIndex].data.output = response.data.result; // Ensure you access the correct structure\n//       setNodes(updatedNodes);\n//     } catch (error: any) {  // Assert the error type to 'any'\n//       console.error(\"Error during API call:\", error.response ? error.response.data : error.message);\n//       alert(\"An error occurred while calling the API. Please try again.\");\n//     }\n//   };\n  \n\n//   return (\n//     <div style={{ height: '100vh' }}>\n//       <ReactFlow\n//         nodes={nodes}\n//         edges={edges}\n//         onNodesChange={onNodesChange}\n//         onEdgesChange={onEdgesChange}\n//         onConnect={onConnect}\n//         nodeTypes={nodeTypes}\n//         fitView\n//       >\n//         <Background />\n//         <Controls />\n//       </ReactFlow>\n//       <button onClick={handleRunWorkflow} style={{ marginTop: '10px', padding: '10px' }}>\n//         Run Workflow\n//       </button>\n//     </div>\n//   );\n// };\n\n// export default App;\n// import React, { useState, useCallback } from 'react';\n// import axios from 'axios';\n// import ReactFlow, {\n//   addEdge,\n//   applyEdgeChanges,\n//   applyNodeChanges,\n//   Controls,\n//   Background,\n//   NodeChange,\n//   EdgeChange,\n//   Connection,\n//   Edge,\n//   Node,\n// } from 'react-flow-renderer';\n// import  InputNode  from \"./components/InputNode\"\n// import  LLMNode  from './components/LLMNode';\n// import { OutputNode } from './components/OutputNode';\n\n// // Define initial nodes and edges\n// const initialNodes: Node[] = [\n//   {\n//     id: '1',\n//     type: 'inputNode',\n//     position: { x: 250, y: 5 },\n//     data: { label: 'Input Node', inputText: '' },\n//   },\n//   {\n//     id: '2',\n//     type: 'llmNode',\n//     position: { x: 250, y: 100 },\n//     data: { label: 'LLM Node', modelConfig: {} },\n//   },\n//   {\n//     id: '3',\n//     type: 'outputNode',\n//     position: { x: 250, y: 200 },\n//     data: { label: 'Output Node', output: '' },\n//   },\n// ];\n\n// const initialEdges: Edge[] = [];\n\n// const nodeTypes = {\n//   inputNode: InputNode,\n//   llmNode: LLMNode,\n//   outputNode: OutputNode,\n// };\n\n// const App = () => {\n//   const [nodes, setNodes] = useState<Node[]>(initialNodes);\n//   const [edges, setEdges] = useState<Edge[]>(initialEdges);\n\n//   // Handle node changes\n//   const onNodesChange = useCallback(\n//     (changes: NodeChange[]) => setNodes((nds) => applyNodeChanges(changes, nds)),\n//     []\n//   );\n\n//   // Handle edge changes\n//   const onEdgesChange = useCallback(\n//     (changes: EdgeChange[]) => setEdges((eds) => applyEdgeChanges(changes, eds)),\n//     []\n//   );\n\n//   // Handle node connections (Input -> LLM -> Output)\n//   const onConnect = useCallback(\n//     (params: Connection | Edge) => {\n//       const { source, target } = params;\n\n//       // Define valid connection rules\n//       if (\n//         (source === '1' && target === '2') || // Input -> LLM\n//         (source === '2' && target === '3') // LLM -> Output\n//       ) {\n//         setEdges((eds) => addEdge(params, eds));\n//       } else {\n//         alert('Invalid connection! Follow Input -> LLM -> Output flow.');\n//       }\n//     },\n//     []\n//   );\n\n//   // Handle workflow execution\n//   const handleRunWorkflow = async () => {\n//     const inputNode = nodes.find((node) => node.type === 'inputNode');\n//     const llmNode = nodes.find((node) => node.type === 'llmNode');\n//     const outputNodeIndex = nodes.findIndex((node) => node.type === 'outputNode');\n\n//     // Check if the required nodes are found\n//     if (!inputNode || !llmNode || outputNodeIndex === -1) {\n//       console.error(\"One or more nodes are not defined.\");\n//       alert(\"Please ensure that all nodes (Input, LLM, Output) are properly connected.\");\n//       return;\n//     }\n\n//     try {\n//       const response = await axios.post('https://api.openai.com/v1/chat/completions', {\n//         inputText: inputNode.data.inputText,\n//         modelConfig: {\n//           model: llmNode.data.modelConfig.modelName,\n//           temperature: llmNode.data.modelConfig.temperature,\n//           maxTokens: llmNode.data.modelConfig.maxTokens,\n//           topP: llmNode.data.modelConfig.topP,\n//           frequencyPenalty: llmNode.data.modelConfig.frequencyPenalty,\n//           presencePenalty: llmNode.data.modelConfig.presencePenalty,\n//         },\n//       }, {\n//         headers: {\n//           'Authorization': `Bearer ${process.env.REACT_APP_OPENAI_API_KEY}`,\n//         },\n//       });\n\n//       const updatedNodes = [...nodes];\n//       updatedNodes[outputNodeIndex].data.output = response.data.result; // Ensure you access the correct structure\n//       setNodes(updatedNodes);\n//       console.log(nodes)\n//     } catch (error: any) {  // Assert the error type to 'any'\n//       console.error(\"Error during API call:\", error.response ? error.response.data : error.message);\n//       alert(\"An error occurred while calling the API. Please try again.\");\n//     }\n//   };\n\n//   return (\n//     <div style={{ height: '100vh' }}>\n//       <ReactFlow\n//         nodes={nodes}\n//         edges={edges}\n//         onNodesChange={onNodesChange}\n//         onEdgesChange={onEdgesChange}\n//         onConnect={onConnect}\n//         nodeTypes={nodeTypes}\n//         fitView\n//       >\n//         <Background />\n//         <Controls />\n//       </ReactFlow>\n//       <button onClick={handleRunWorkflow} style={{ marginTop: '10px', padding: '10px' }}>\n//         Run Workflow\n//       </button>\n//     </div>\n//   );\n// };\n\n// export default App;\n\n\n\n\n\n// App.tsx\n// App.tsx\n// import React, { useState, useCallback, useRef } from 'react';\n// import ReactFlow, {\n//   addEdge,\n//   applyEdgeChanges,\n//   applyNodeChanges,\n//   Controls,\n//   Background,\n//   NodeChange,\n//   EdgeChange,\n//   Connection,\n//   Edge,\n//   Node,\n//   ReactFlowProvider,\n// } from 'react-flow-renderer';\n// import { InputNode } from './components/InputNode';\n// import { LLMNode } from './components/LLMNode';\n// import { OutputNode } from './components/OutputNode';\n//  // Import your custom edge if needed\n\n// const nodeTypes = {\n//   inputNode: InputNode,\n//   llmNode: LLMNode,\n//   outputNode: OutputNode,\n// };\n\n// // const edgeTypes = {\n// //   custom: CustomEdge, \n//   // Use your custom edge if needed\n// // };\n\n// const initialNodes: Node[] = [];\n\n// const App = () => {\n//   const [nodes, setNodes] = useState<Node[]>(initialNodes);\n//   const [edges, setEdges] = useState<Edge[]>([]);\n  \n//   // Create a ref for the ReactFlow instance\n//   const reactFlowInstance = useRef<any>(null);\n\n//   // Handle node changes\n//   const onNodesChange = useCallback(\n//     (changes: NodeChange[]) => setNodes((nds) => applyNodeChanges(changes, nds)),\n//     []\n//   );\n\n//   // Handle edge changes\n//   const onEdgesChange = useCallback(\n//     (changes: EdgeChange[]) => setEdges((eds) => applyEdgeChanges(changes, eds)),\n//     []\n//   );\n\n//   // Handle connections\n//   const onConnect = useCallback(\n//     (params: Connection | Edge) => {\n//       setEdges((eds) => addEdge({ ...params, type: 'custom' }, eds));\n//     },\n//     []\n//   );\n\n//   // Drag-and-drop functionality\n//   const onDrop = useCallback(\n//     (event: React.DragEvent) => {\n//       event.preventDefault();\n//       const type = event.dataTransfer.getData('application/reactflow');\n//       const position = reactFlowInstance.current.project({\n//         x: event.clientX,\n//         y: event.clientY,\n//       });\n\n//       if (type) {\n//         const newNode = {\n//           id: `${nodes.length + 1}`,\n//           type,\n//           position,\n//           data: { label: `${type} Node` }, // Customize this according to your node types\n//         };\n//         setNodes((nds) => nds.concat(newNode));\n//       }\n//     },\n//     [nodes]\n//   );\n\n//   const onDragOver = useCallback((event: React.DragEvent) => {\n//     event.preventDefault();\n//     event.dataTransfer.dropEffect = 'move';\n//   }, []);\n\n//   return (\n//     <div style={{ height: '100vh' }}>\n//       <ReactFlow\n//         nodes={nodes}\n//         edges={edges}\n//         onNodesChange={onNodesChange}\n//         onEdgesChange={onEdgesChange}\n//         onConnect={onConnect}\n//         nodeTypes={nodeTypes}\n//         // edgeTypes={edgeTypes}\n//         fitView\n//         onDrop={onDrop}\n//         onDragOver={onDragOver}\n//         ref={reactFlowInstance} // Attach the ref here\n//       >\n//         <Background />\n//         <Controls />\n//       </ReactFlow>\n//       <div className=\"sidebar\">\n//         <h3>Drag Nodes</h3>\n//         <div\n//           className=\"drag-node\"\n//           draggable\n//           onDragStart={(event) => event.dataTransfer.setData('application/reactflow', 'inputNode')}\n//         >\n//           Input Node\n//           <InputNode data={{\n//             label: '',\n//             inputText: ''\n//           }} onChange={function (inputText: string): void {\n//             throw new Error('Function not implemented.');\n//           } } />\n//         </div>\n//         <div\n//           className=\"drag-node\"\n//           draggable\n//           onDragStart={(event) => event.dataTransfer.setData('application/reactflow', 'llmNode')}\n//         >\n//           LLM Node\n//         </div>\n//         <div\n//           className=\"drag-node\"\n//           draggable\n//           onDragStart={(event) => event.dataTransfer.setData('application/reactflow', 'outputNode')}\n//         >\n//           Output Node\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default App;\n\n\n\n\n\nimport React, { useState, useCallback } from 'react';\nimport axios from 'axios';\nimport ReactFlow, {\n  addEdge,\n  applyEdgeChanges,\n  applyNodeChanges,\n  Controls,\n  Background,\n  useReactFlow,\n  NodeChange,\n  EdgeChange,\n  Connection,\n  Edge,\n  Node,\n  ReactFlowProvider,\n} from 'react-flow-renderer';\nimport { InputNode } from './components/InputNode';\nimport { LLMNode } from './components/LLMNode';\nimport { OutputNode } from './components/OutputNode';\n\nconst nodeTypes = {\n  inputNode: InputNode,\n  llmNode: LLMNode,\n  outputNode: OutputNode,\n};\n\nconst initialNodes: Node[] = [];\n\nconst App = () => {\n  const [nodes, setNodes] = useState<Node[]>(initialNodes);\n  const [edges, setEdges] = useState<Edge[]>([]);\n  const [inputText, setInputText] = useState('');\n  const [modelConfig, setModelConfig] = useState('');\n\n  const { project } = useReactFlow();\n\n  const onNodesChange = useCallback(\n    (changes: NodeChange[]) => setNodes((nds) => applyNodeChanges(changes, nds)),\n    []\n  );\n\n  const onEdgesChange = useCallback(\n    (changes: EdgeChange[]) => setEdges((eds) => applyEdgeChanges(changes, eds)),\n    []\n  );\n\n  const onConnect = useCallback(\n    (params: Connection | Edge) => {\n      setEdges((eds) => addEdge({ ...params, type: 'custom' }, eds));\n    },\n    []\n  );\n\n  const onDrop = useCallback(\n    (event: React.DragEvent) => {\n      event.preventDefault();\n      const type = event.dataTransfer.getData('application/reactflow');\n      const position = project({\n        x: event.clientX,\n        y: event.clientY,\n      });\n\n      if (type) {\n        const newNode = {\n          id: `${nodes.length + 1}`,\n          type,\n          position,\n          data: { label: `${type} Node` },\n        };\n        setNodes((nds) => nds.concat(newNode));\n      }\n    },\n    [nodes, project]\n  );\n\n  const onDragOver = useCallback((event: React.DragEvent) => {\n    event.preventDefault();\n    event.dataTransfer.dropEffect = 'move';\n  }, []);\n\n  const handleRunWorkflow = async () => {\n    const inputNode = nodes.find((node) => node.type === 'inputNode');\n    const llmNode = nodes.find((node) => node.type === 'llmNode');\n    const outputNodeIndex = nodes.findIndex((node) => node.type === 'outputNode');\n  \n    if (!inputNode || !llmNode || outputNodeIndex === -1) {\n      console.error(\"One or more nodes are not defined.\");\n      alert(\"Please ensure that all nodes (Input, LLM, Output) are properly connected.\");\n      return;\n    }\n  \n    try {\n      const response = await axios.post('https://api.openai.com/v1/chat/completions', {\n        inputText: inputNode.data.inputText,\n        modelConfig: llmNode.data.modelConfig,\n      });\n  \n      const updatedNodes = [...nodes];\n      updatedNodes[outputNodeIndex].data.output = response.data.result;\n      setNodes(updatedNodes);\n    } catch (error: any) {\n      console.error(\"Error during API call:\", error.response ? error.response.data : error.message);\n      alert(\"An error occurred while calling the API. Please try again.\");\n    }\n  };\n\n  return (\n    <ReactFlowProvider>\n      <div style={{ height: '100vh' }}>\n        <ReactFlow\n          nodes={nodes}\n          edges={edges}\n          onNodesChange={onNodesChange}\n          onEdgesChange={onEdgesChange}\n          onConnect={onConnect}\n          nodeTypes={nodeTypes}\n          fitView onDrop={onDrop}\n          onDragOver={onDragOver}\n        >\n          <Background />\n          <Controls />\n        </ReactFlow>\n        <div className=\"sidebar\">\n          <h3>Drag Nodes</h3>\n          <div\n            className=\"drag-node\"\n            draggable\n            onDragStart={(event) => event.dataTransfer.setData('application/reactflow', 'inputNode')}\n          >\n            Input Node\n            <InputNode data={{ label: 'Enter your prompt', inputText: '' }} />\n          </div>\n          <div\n            className=\"drag-node\"\n            draggable\n            onDragStart={(event) => event.dataTransfer.setData('application/reactflow', 'llmNode')}\n          >\n            LLM Node\n            <LLMNode data={{ label: 'Model Config', modelConfig: '' }} />\n          </div>\n          <div\n            className=\"drag-node\"\n            draggable\n            onDragStart={(event) => event.dataTransfer.setData('application/reactflow', 'outputNode')}\n          >\n            Output Node\n          </div>\n        </div>\n        <button onClick={handleRunWorkflow} style={{ marginTop: '10px', padding: '10px' }}>\n          Run Workflow\n        </button>\n      </div>\n    \n    </ReactFlowProvider>\n  );\n};\n\nexport default App;"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAMA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AACpD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,IACdC,OAAO,EACPC,gBAAgB,EAChBC,gBAAgB,EAChBC,QAAQ,EACRC,UAAU,EACVC,YAAY,EAMZC,iBAAiB,QACZ,qBAAqB;AAC5B,SAASC,SAAS,QAAQ,wBAAwB;AAClD,SAASC,OAAO,QAAQ,sBAAsB;AAC9C,SAASC,UAAU,QAAQ,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErD,MAAMC,SAAS,GAAG;EAChBC,SAAS,EAAEN,SAAS;EACpBO,OAAO,EAAEN,OAAO;EAChBO,UAAU,EAAEN;AACd,CAAC;AAED,MAAMO,YAAoB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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}